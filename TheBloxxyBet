local OrionLib = loadstring(game:HttpGet(("https://raw.githubusercontent.com/shlexware/Orion/main/source")))()
_G.OrionLib = OrionLib

-- ========================== General System ===========================
if 1 then
    local placeId = game.PlaceId
    SEA = ""
    if placeId == 2753915549 then
        SEA = "1"
    elseif placeId == 4442272183 then
        SEA = "2"
    elseif placeId == 7449423635 then
        SEA = "3"
    end

    if (SEA == "") then
        while true do
            wait()
        end
    end

    function ReloadPlayersList()
        Playerslist = {}
        table.insert(Playerslist, "Nothing")
        for i, v in pairs(game:GetService("Players"):GetChildren()) do
            table.insert(Playerslist, v.Name)
        end

        DropdownPlayers:Set(Playerslist, true)
    end

    function VT(tabela)
        local httpService = game:GetService("HttpService")
        local jsonStr = httpService:JSONEncode(tabela)
        return jsonStr
    end

    function round(num)
        return math.floor(tonumber(num) + 0.5)
    end

    function EquipWeapon(ToolSe)
        if game.Players.LocalPlayer.Backpack:FindFirstChild(ToolSe) then
            Tool = game.Players.LocalPlayer.Backpack:FindFirstChild(ToolSe)
            wait(.1)
            game.Players.LocalPlayer.Character.Humanoid:EquipTool(Tool)
        end
    end

    function containsItem(table, item)
        for _, value in ipairs(table) do
            if value == item then
                return true
            end
        end
        return false
    end

    function CheckSafeZone(p)
        -- Verifica se 'p' possui 'HumanoidRootPart' e 'Humanoid' para evitar erros
        if not p:FindFirstChild("HumanoidRootPart") or not p:FindFirstChild("Humanoid") then
            return false
        end

        for i, v in pairs(game:GetService("Workspace")["_WorldOrigin"].SafeZones:GetChildren()) do
            if v:IsA("Part") then
                local distance = (v.Position - p.HumanoidRootPart.Position).magnitude
                local healthPercentage = p.Humanoid.Health / p.Humanoid.MaxHealth
                if distance <= 200 and healthPercentage >= 0.95 then
                    return true
                end
            end
        end
        return false
    end
    _G.ActionList = {
    ICE_COMBO = {
        {item = "Dragon Trident", key = "X", delay = 0.7, M = _G.MaxTPDistance or 250, T = 1},
        {item = "Skull Guitar", key = "X", delay = 1.2, M = 55, T = 1},
        {item = "Ice-Ice", key = "V", delay = 0, M = 40, T = 1}
    },
    DragonGuitar = {
        {item = "Dragon Trident", key = "X", delay = 0.7, M = _G.MaxTPDistance or 250, T = 1},
        {item = "Skull Guitar", key = "X", delay = 1.2, M = 55, T = 1},
    },
    ICE = {
        {item = "Ice-Ice", key = "V", delay = 0, M = _G.MaxTPDistance or 250, T = 1},
    },
    SoulGuitar = {
        {item = "Skull Guitar", key = "X", delay = 1.2, M = _G.MaxTPDistance or 250, T = 1},
    },
    Z_CDK = {
        {item = "Cursed Dual Katana", key = "Z", delay = 0, M = _G.MaxTPDistance or 250, T = 1, S = 1},
    },
    V_DOUGH = {
        {item = "Dough-Dough", key = "V", delay = 0, M = _G.MaxTPDistance or 250, T = 1, S = 3},
    },
    DragonTrident = {
        {item = "Dragon Trident", key = "X", delay = 0, M = _G.MaxTPDistance or 250, T = 1},
    }
    }
        -- Tabelas para armazenar os itens e suas ações
        local playerItems = {}
        local playerItemActions = {}
        local player = game:GetService("Players").LocalPlayer

        -- Função para adicionar um item e sua ação à mochila do jogador
        function addItemToInventory(player, item, action)
            player = player or game:GetService("Players").LocalPlayer
            local clonedItem = item:Clone() -- Clona o item original
            table.insert(playerItems, item) -- Adiciona o item à tabela
            table.insert(playerItemActions, action) -- Adiciona a ação à tabela de ações
        end

        -- Função para remover um item e sua ação
        function removeItemFromInventory(itemName)
            local inventory = player:WaitForChild("Backpack")

            for i, item in ipairs(playerItems) do
                if item.Name == itemName then
                    table.remove(playerItems, i) -- Remove o item da tabela de itens
                    table.remove(playerItemActions, i) -- Remove a ação correspondente
                        if not (not inventory or not itemName) then
                            local item = inventory:FindFirstChild(itemName)
                            if item then
                                item:Destroy()
                            end
                        end
                    break
                end
            end
        end

        -- Função que restaura os itens e aplica suas ações
        function restoreInventory(player)
            player = player or game:GetService("Players").LocalPlayer
            for i, item in ipairs(playerItems) do
                local clonedItem = item:Clone() -- Clona o item

                -- Ação correspondente ao item restaurado
                local action = playerItemActions[i]
                if action then
                    clonedItem.Activated:Connect(action)
                end
                clonedItem.Parent = player.Backpack -- Reinsere o item na mochila do jogador
            end
        end

        -- Função para carregar o JSON e pegar a ação específica
        function getActionFromJson(actionName)
            -- Supondo que o JSON já está carregado como _G.ActionList
            if _G.ActionList[actionName] then
                return _G.ActionList[actionName]
            else
                -- Chama uma função alternativa caso a ação não seja encontrada
                NotificationMenuGame("Ação " .. actionName .. " não encontrada no JSON!")
                return nil
            end
        end

        function addTeleportTool(actionName)
            l = game.Players.LocalPlayer
        
            local plr = game:GetService("Players").LocalPlayer
            local tool = Instance.new("Tool")
            tool.RequiresHandle = false
            tool.Name = actionName

            -- Função principal a ser chamada quando a ferramenta é ativada
            local function A()
                local success, result = pcall(function()
                    if not (_G.V1 or _G.V2) then
                        NotificationMenuGame("Habilite o Teleporte V1 ou V2.")
                        return
                    end
                local actions = getActionFromJson(actionName)
                if not actions then
                    return
                end -- Se a ação não for encontrada, sai da função

                for _, action in ipairs(actions) do
                    local weaponName = action.item
                    local key = action.key
                    local t = action.delay or 0.7
                    local d = action.M or 400
                    local T = action.T or 0
                    local S = action.S or 0

                    local distance =
                        round(
                        (game:GetService("Players").LocalPlayer.Character.Head.Position - _G.SPLY.Character.Head.Position).Magnitude /
                            3
                    )

                    local root = plr.Character.HumanoidRootPart

                    if (distance > d) then
                        NotificationMenuGame("Jogador muito distante...")
                        return
                    end
                    
                    -- Posiciona o player (conforme seu código) e equipa a arma
                    if _G.SPLY and _G.SPLY.Character and _G.SPLY.Character:FindFirstChild("HumanoidRootPart") and (T == 1) then
                        if (_G.SelectedPosition and _G.SelectedBall and _G.IsScriptRunning) then
                            root.CFrame = _G.SelectedPosition2
                        else
                            currentPosition = _G.SPLY.Character.HumanoidRootPart.CFrame
                            newPosition = currentPosition + Vector3.new(0, 2.5, 0)
                            root.CFrame = newPosition
                        end
                    else
                        if (T == 1) then
                            NotificationMenuGame("Jogador não encontrado para a posição!")
                            return
                        end
                    end

                    

                    if (distance > d) then
                        root.CFrame = root.CFrame + Vector3.new(2, 25, 0)
                        NotificationMenuGame("Jogador muito distante...")
                        return
                    end

                    -- Equipar e pressionar a tecla da ação
                    if containsItem(_G.WeaponList, weaponName) then
                        EquipWeapon(weaponName)
                        while not (game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool").Name == weaponName) or
                            not (game:GetService("Players").LocalPlayer.PlayerGui:WaitForChild("Main").Skills.Visible) do
                            wait()
                        end
                        -- Pressiona a tecla especificada
                        game:GetService("VirtualInputManager"):SendKeyEvent(true, key, false, game)
                        wait(S)
                        game:GetService("VirtualInputManager"):SendKeyEvent(false, key, false, game)
                        
                        wait(t)
                    else
                        NotificationMenuGame("Arma " .. weaponName .. " não encontrada!")
                        return
                    end
                end
            end)

            if not success then
                NotificationMenuGame("error: " .. result)
            end
            end

            tool.Activated:Connect(A)
            addItemToInventory(nil, tool, A)
            tool.Parent = plr.Backpack
        end

    

    spawn(
        function()
            pcall(
                function()
                    game:GetService("RunService").Stepped:Connect(
                            function()
                                pcall(function()
                                if _G.SettingTable.NoClip or _G.Clip then
                                    for _, v in pairs(game:GetService("Players").LocalPlayer.Character:GetDescendants()) do
                                        if v:IsA("BasePart") then
                                            v.CanCollide = false
                                        end
                                    end
                                end
                            end)
                        end
                    )
                end
            )
        end
    )
    function StopTween(target)
        if not target then
            _G.StopTween = true
            wait()
            topos(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame)
            wait()
            if game:GetService("Players").LocalPlayer.Character.HumanoidRootPart:FindFirstChild("BodyClip") then
                game:GetService("Players").LocalPlayer.Character.HumanoidRootPart:FindFirstChild("BodyClip"):Destroy()
            end
            _G.StopTween = false
            _G.Clip = false
        end
    end

    function findIndex(item, list)
        for i, v in ipairs(list) do
            if v == item then
                return i
            end
        end
        return nil
    end

    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

    function topos(Pos)
        Distance = (Pos.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
        _G.Distanec = Distance
        if Distance > 2000 then
            X = 500
        else
            X = 0
        end
        if game.Players.LocalPlayer.Character.Humanoid.Sit == true then
            game.Players.LocalPlayer.Character.Humanoid.Sit = false
        end
        pcall(
            function()
                tween =
                    game:GetService("TweenService"):Create(
                    game.Players.LocalPlayer.Character.HumanoidRootPart,
                    TweenInfo.new(Distance / 280, Enum.EasingStyle.Linear),
                    {CFrame = Pos + Vector3.new(0, X, 0)}
                )
            end
        )

        tween:Play()
        if Distance <= 150 then
            tween:Cancel()
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Pos
            _G.TeleportToIslandToggle:Set(false)
        end
        if _G.StopTween == true then
            tween:Cancel()
            _G.Clip = false
        else
        end
    end

    local function F_Number(numero)
        -- Define a lista de sufixos e seus valores, incluindo bilhões
        local sufixos = {
            {valor = 1e9, sufixo = "B"},
            {valor = 1e6, sufixo = "M"},
            {valor = 1e3, sufixo = "K"}
        }

        -- Verifica o sufixo apropriado para o número
        for _, sufixoInfo in ipairs(sufixos) do
            if numero >= sufixoInfo.valor then
                -- Calcula o valor formatado com precisão de duas casas decimais
                local valorFormatado = numero / sufixoInfo.valor
                if valorFormatado >= 100 then
                    return string.format("%.0f%s", valorFormatado, sufixoInfo.sufixo) -- Sem casas decimais para valores grandes
                elseif valorFormatado >= 10 then
                    return string.format("%.1f%s", valorFormatado, sufixoInfo.sufixo) -- Uma casa decimal para valores médios
                else
                    return string.format("%.2f%s", valorFormatado, sufixoInfo.sufixo) -- Duas casas decimais para valores pequenos
                end
            end
        end

        -- Caso não se aplique nenhum sufixo, retorna o número original
        return tostring(numero)
    end

    function JumpForceFunction(J)
        _G.jumpPower = _G.SettingTable.Jump or 50

        -- Função para forçar o JumpPower do LocalPlayer
        local function forceJumpPower(humanoid)
            humanoid.JumpPower = _G.jumpPower
            humanoid:GetPropertyChangedSignal("JumpPower"):Connect(
                function()
                    if humanoid.JumpPower ~= _G.jumpPower then
                        humanoid.JumpPower = _G.jumpPower
                    end
                end
            )
        end

        -- Referência ao jogador local
        local player = game.Players.LocalPlayer

        -- Conectar a função quando o personagem do jogador local for adicionado
        player.CharacterAdded:Connect(
            function(character)
                local humanoid = character:WaitForChild("Humanoid")
                forceJumpPower(humanoid)
            end
        )

        -- Caso o personagem do jogador local já esteja carregado
        if player.Character then
            local humanoid = player.Character:FindFirstChild("Humanoid")
            if humanoid then
                forceJumpPower(humanoid)
            end
        end

        -- Função para atualizar o JumpPower do LocalPlayer
        local function updateJumpPower()
            if player.Character then
                local humanoid = player.Character:FindFirstChild("Humanoid")
                if humanoid then
                    humanoid.JumpPower = _G.jumpPower
                end
            end
        end

        -- Atualizar o JumpPower do LocalPlayer constantemente
        game:GetService("RunService").Stepped:Connect(
            function()
                updateJumpPower()
            end
        )
    end

    function RemoveHighlightV1()
        pcall(
            function()
                local Players = game:GetService("Players")
                _G.HighlightV1 = false

                for _, player in ipairs(Players:GetPlayers()) do
                    local indicator = _G.IndicatorInstanceList[player.Name]
                    if indicator then
                        indicator:Destroy()
                    end
                end
            end
        )
    end

    function ReloadHighlightV1()
        RemoveHighlightV1()
        CreateHighlightV1()
    end

    function CreateHighlightV1()
        local Players = game:GetService("Players")
        local PlayersIndicatorList = {}
        _G.IndicatorInstanceList = {}
        _G.HighlightV1 = true

        _G.Highlight_L = true

        -- Função para criar um indicador acima da cabeça do jogador
        local function createIndicator(player)
            local character = player.Character
            if character and not character:FindFirstChild("Indicator") then
                local head = character:FindFirstChild("Head")
                if head and not table.find(PlayersIndicatorList, player.Name) then
                    table.insert(PlayersIndicatorList, player.Name)

                    -- Definir a cor principal com base no time e valores
                    MainColor = Color3.fromRGB(255, 0, 0) -- Padrão vermelho
                    if (CheckSafeZone(character)) then
                        MainColor = Color3.fromRGB(0, 255, 50) -- Padrão Verde
                    end

                    if
                        tostring(game.Players.LocalPlayer.Team) == "Marines" and
                            game.Players.LocalPlayer.Team == player.Team
                     then
                        MainColor = Color3.fromRGB(255, 0, 255) -- Verde para time igual
                    elseif game:GetService("Players")[player.Name].leaderstats["Bounty/Honor"].Value > 10000000 then
                        MainColor = Color3.fromRGB(153, 0, 255)
                    elseif game:GetService("Players")[player.Name].leaderstats["Bounty/Honor"].Value > 3000000 then
                        MainColor = Color3.fromRGB(255, 255, 0) -- Amarelo para alta pontuação
                    end

                    -- Criar o indicador visual
                    local billboardGui = Instance.new("BillboardGui")
                    billboardGui.Name = "Indicator"
                    billboardGui.Parent = head
                    billboardGui.Size = UDim2.new(5.2, 0, 7, 0)
                    billboardGui.StudsOffset = Vector3.new(-0.15, -2.5, 0)
                    billboardGui.AlwaysOnTop = true

                    local frame = Instance.new("Frame")
                    frame.Parent = billboardGui
                    frame.Size = UDim2.new(1, 0, 1, 0)
                    frame.BackgroundTransparency = _G.SettingTable2.OBS_Transparency or 0.6
                    frame.BackgroundColor3 = MainColor
                    _G.IndicatorInstanceList[player.Name] = billboardGui
                end
            end
        end

        -- Aplicar o indicador para os jogadores existentes
        for _, player in ipairs(Players:GetPlayers()) do
            player.CharacterAdded:Connect(
                function()
                    createIndicator(player)
                end
            )
            if player.Character then
                createIndicator(player)
            end
        end
    end

    function CreateHighlightV2()
        local Players = game:GetService("Players")
        local RunService = game:GetService("RunService")
        _G.highlightEnabled = _G.highlightEnabled or false -- Inicializa o sistema como habilitado

        local function createHighlight(player)
            if not player.Character then
                return
            end

            local success, result =
                pcall(
                function()
                    local bountyValue =
                        player:FindFirstChild("leaderstats") and player.leaderstats:FindFirstChild("Bounty/Honor") and
                        player.leaderstats["Bounty/Honor"].Value or
                        0
                    local mainColor = Color3.fromRGB(255, 0, 0) -- Vermelho padrão

                    if player == Players.LocalPlayer then
                        mainColor = Color3.fromRGB(0, 255, 0) -- Verde para o próprio jogador
                    elseif bountyValue > 3000000 then
                        mainColor = Color3.fromRGB(255, 255, 0) -- Amarelo para alta pontuação
                    elseif Players.LocalPlayer.Team == player.Team then
                        mainColor = Color3.fromRGB(0, 255, 255) -- Azul para mesmo time
                    end

                    local highlight = Instance.new("Highlight")
                    highlight.Name = "PlayerHighlight"
                    highlight.Adornee = player.Character
                    highlight.Parent = player.Character
                    highlight.OutlineTransparency = 10
                    highlight.FillTransparency = _G.SettingTable2.OBS_Transparency or 0.6
                    highlight.FillColor = mainColor
                end
            )

            if not success then
                warn("Failed to create highlight for " .. player.Name .. ": " .. tostring(result))
            end
        end

        local function removeHighlight(player)
            if player.Character then
                local highlight = player.Character:FindFirstChild("PlayerHighlight")
                if highlight then
                    highlight:Destroy()
                end
            end
        end

        local function toggleHighlight()
            _G.highlightEnabled = _G.highlightEnabled

            if _G.highlightEnabled then
                spawn(
                    function()
                        while _G.highlightEnabled do
                            wait(0.5)
                            for _, player in ipairs(Players:GetPlayers()) do
                                removeHighlight(player)
                                createHighlight(player)
                            end
                        end
                        wait(1)
                        for _, player in ipairs(Players:GetPlayers()) do
                            removeHighlight(player)
                        end
                    end
                )
            else
                for _, player in ipairs(Players:GetPlayers()) do
                    removeHighlight(player)
                end
            end
        end

        Players.PlayerAdded:Connect(
            function(player)
                player.CharacterAdded:Connect(
                    function()
                        if _G.highlightEnabled then
                            createHighlight(player)
                        end
                    end
                )
            end
        )

        Players.PlayerRemoving:Connect(removeHighlight)

        for _, player in ipairs(Players:GetPlayers()) do
            player.CharacterAdded:Connect(
                function()
                    if _G.highlightEnabled then
                        createHighlight(player)
                    end
                end
            )
        end

        toggleHighlight()
    end

    _G.OJO_SV = {}
    function SuperView()
        -- Variáveis globais para controlar o script
        _G.IsScriptRunning = true
        _G.MonitoringTime = 70
        _G.SelectedPosition = nil
        _G.SelectedBall = nil
        _G.SensitivitySpeed = 0.7
        _G.SensitivityDistance = 0.5
    
        -- Variáveis internas
        local sphere = nil
        local velocityHistory = {}
        local directionHistory = {}
        local maxHistorySize = 350
        _G.SelectedPlayer = game.Players.LocalPlayer -- Inicia monitorando o local player por padrão
        local targetCharacter, humanoid, rootPart
    
        -- Função para criar a esfera
        local function createSphere()
            local part = Instance.new("Part")
            part.Shape = Enum.PartType.Ball
            part.Size = Vector3.new(3, 3, 3)
            part.Anchored = true
            part.CanCollide = false
            part.Transparency = 0.3
            return part
        end
    
        -- Função para mudar a cor dinamicamente
        local function updateSphereColor(sphere)
            game:GetService("RunService").RenderStepped:Connect(
                function()
                    if sphere then
                        local time = tick() % 5
                        local r = math.abs(math.sin(time * math.pi / 5))
                        local g = math.abs(math.sin((time + 1) * math.pi / 5))
                        local b = math.abs(math.sin((time + 2) * math.pi / 5))
                        sphere.BrickColor = BrickColor.new(Color3.new(r, g, b))
                    end
                end
            )
        end
    
        -- Função para calcular a média de um histórico de valores
        local function calculateAverage(history, count)
            local sum = Vector3.new(0, 0, 0)
            for i = #history - count + 1, #history do
                sum = sum + history[i]
            end
            return sum / count
        end
    
        -- Função principal de monitoramento
        local function monitor()
            if not targetCharacter then
                return
            end
    
            game:GetService("RunService").RenderStepped:Connect(
                function()
                    if _G.IsScriptRunning and humanoid and humanoid.Health > 0 then
                        -- Armazena no histórico
                        table.insert(velocityHistory, rootPart.Velocity)
                        table.insert(directionHistory, humanoid.MoveDirection)
    
                        -- Limita o tamanho do histórico
                        if #velocityHistory > maxHistorySize then
                            table.remove(velocityHistory, 1)
                        end
                        if #directionHistory > maxHistorySize then
                            table.remove(directionHistory, 1)
                        end
    
                        -- Calcula a média de velocidade e direção
                        local monitoringTime = math.min(#velocityHistory, _G.MonitoringTime)
                        local avgVelocity = calculateAverage(velocityHistory, monitoringTime)
                        local avgDirection = calculateAverage(directionHistory, monitoringTime)
    
                        -- Ajusta com base nas variáveis globais
                        local sensitivityFactor = _G.SensitivitySpeed
                        local deltaTime = _G.SensitivityDistance
    
                        -- Calcula a posição prevista
                        local predictedPosition =
                            rootPart.Position + (avgVelocity.Magnitude * avgDirection * deltaTime * sensitivityFactor)
    
                        -- Atualiza a posição da esfera
                        if not sphere then
                            sphere = createSphere()
                            sphere.Parent = workspace
                            updateSphereColor(sphere)
                        end
    
                        sphere.Position = predictedPosition
                        _G.SelectedPosition = predictedPosition
                        _G.SelectedPosition2 = CFrame.new(predictedPosition)
                        _G.SelectedBall = sphere
                    else
                        -- Reseta se o jogador sair do jogo ou perder a vida
                        if sphere then
                            sphere:Destroy()
                            sphere = nil
                        end
                        _G.SelectedPosition = nil
                    end
                end
            )
        end
    
        -- Função para atualizar o jogador monitorado
        local function updateTargetPlayer(player)
            if player and player.Character then
                _G.SelectedPlayer = player
                targetCharacter = player.Character
                humanoid = targetCharacter:WaitForChild("Humanoid")
                rootPart = targetCharacter:WaitForChild("HumanoidRootPart")
    
                if not sphere then
                    sphere = createSphere()
                    sphere.Parent = workspace
                    updateSphereColor(sphere)
                end
            end
        end
    
        -- Função para mudar o jogador monitorado
        function MudarPlayerMonitorado(newPlayerName)
            local targetPlayer = game.Players:FindFirstChild(newPlayerName)
    
            if targetPlayer then
                updateTargetPlayer(targetPlayer)
            else
                print("Jogador não encontrado: " .. newPlayerName)
                -- Volta para o local player se o jogador não for encontrado
                updateTargetPlayer(game.Players.LocalPlayer)
            end
        end
    
        -- Inicializa monitorando o local player
        updateTargetPlayer(_G.SelectedPlayer)
        monitor()
    end

    function ChangeTargetPlayer(newPlayerName)
        local targetPlayer = game.Players:FindFirstChild(newPlayerName)
        if targetPlayer then
            MudarPlayerMonitorado(newPlayerName)
        end
    end

    spawn(
        function()
            while true do
                wait(0.5)
                if (next(_G.OJO_SV) == nil) then
                    _G.IsScriptRunning = false
                    _G.SelectedBall = nil
                end
            end
        end
    )
    
    _G.OJO_VS = {}
    function OJO()
        local Players = game:GetService("Players")
        local LocalPlayer = Players.LocalPlayer
        local RunService = game:GetService("RunService")
        local maxDistance = 500
        local lookStartTime = 0 -- Tempo de início da observação
        local lookDuration = _G.SettingTable2.SelectPlayer_Timer or 1 -- Tempo de observação necessário para selecionar
        local selectedLine = nil
        local selectedPlayer = nil
        local lookingAtPlayer = nil
        local observationArea = _G.SettingTable2.SelectPlayer_ObservationArea or 0.96 -- Área de observação (quanto mais alto, mais perto do ponto de foco)

        -- Global variables
        _G.SPLY = nil -- Jogador selecionado
        _G.VPO = true -- Controla se o script continua

        local function isPlayerAlive(player)
            local humanoid = player.Character and player.Character:FindFirstChild("Humanoid")
            return humanoid and humanoid.Health > 0
        end

        -- Função para pegar o jogador mais próximo do ponto de foco (com compatibilidade para Shift Lock)
        local function getNearestPlayerInView()
            local camera = workspace.CurrentCamera
            local closestPlayer = nil
            local bestDotProduct = -1 -- Melhor jogador no centro da tela

            for _, player in pairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    local character = player.Character
                    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")

                    local adjustedCameraPosition =
                        humanoidRootPart.Position - Vector3.new(0, _G.SettingTable2.SelectPlayer_Cam or 40, 0) -- Posição ajustada da câmera
                    local direction = (adjustedCameraPosition - camera.CFrame.Position).unit

                    -- Usa um ponto 0.5 unidades acima do centro da tela para compatibilidade com Shift Lock
                    local dotProduct = direction:Dot(camera.CFrame.LookVector)

                    -- Verifica se o jogador está dentro da área de observação
                    if dotProduct > observationArea then
                        -- Verifica se este jogador está mais centralizado (mais próximo do ponto de foco) que o anterior
                        if dotProduct > bestDotProduct then
                            if _G.LockPlayer then
                                closestPlayer = _G.LockPlayerX
                            else
                                bestDotProduct = dotProduct
                                closestPlayer = player
                            end
                        end
                    end
                end
            end

            _G.LockPlayerX = closestPlayer
            return closestPlayer
        end

        -- Função para criar/atualizar a linha de seleção
        local function createOrUpdateSelectionLine(player)
            -- Identifica o alvo com base em `_G.IsScriptRunning`
            local targetPart =
                _G.IsScriptRunning and _G.SelectedBall or
                (player and player.Character and player.Character:FindFirstChild("HumanoidRootPart"))

            -- Verifica se o alvo atual existe
            if targetPart then
                -- Se não existe uma linha selecionada, cria uma nova linha com Attachments
                if not selectedLine then
                    local attachment0 = Instance.new("Attachment")
                    attachment0.Position = Vector3.new(0, 0, 0)
                    attachment0.Parent = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")

                    local attachment1 = Instance.new("Attachment")
                    attachment1.Position = Vector3.new(0, 0, 0)
                    attachment1.Parent = targetPart

                    selectedLine = Instance.new("Beam")
                    selectedLine.Attachment0 = attachment0
                    selectedLine.Attachment1 = attachment1
                    selectedLine.FaceCamera = true
                    selectedLine.Width0 = _G.SettingTable2.SelectPlayer_Line_Width0 or 1
                    selectedLine.Width1 = _G.SettingTable2.SelectPlayer_Line_Width1 or 2
                    selectedLine.LightEmission = 20000
                    selectedLine.LightInfluence = 0
                    selectedLine.Parent = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                else
                    -- Se o alvo mudou, recria a linha para o novo alvo
                    if selectedLine.Attachment1.Parent ~= targetPart then
                        selectedLine:Destroy()
                        selectedLine = nil
                        createOrUpdateSelectionLine(player) -- Recria a linha com o novo alvo
                    end
                end
            else
                -- Se o alvo sumiu, destrói a linha de seleção
                if selectedLine then
                    selectedLine:Destroy()
                    selectedLine = nil
                end
            end
        end

        -- Função para atualizar a cor da linha de seleção
        local function updateLineColor()
            if selectedLine then
                local time = tick()
                local r = math.abs(math.sin(time))
                local g = math.abs(math.sin(time + 2))
                local b = math.abs(math.sin(time + 4))
                selectedLine.Color = ColorSequence.new(Color3.new(r, g, b))
            end
        end

        -- Limpa a seleção quando _G.VPO é falso
        local function clearSelection()
            _G.SPLY = nil
            if selectedLine then
                selectedLine:Destroy()
                selectedLine = nil
            end
        end

        -- Verifica o jogador mais próximo ao ponto de foco e aplica a lógica
        RunService.RenderStepped:Connect(
            function()
                if not _G.VPO then
                    clearSelection()
                    return
                end

                -- Verifica se o LocalPlayer está vivo
                if not isPlayerAlive(LocalPlayer) then
                    clearSelection()
                    -- Aguarda até o jogador reaparecer
                    repeat
                        wait()
                    until isPlayerAlive(LocalPlayer)
                end

                local closestPlayerInView = getNearestPlayerInView()

                if closestPlayerInView then
                    -- Se um novo jogador está sendo observado, reinicia o temporizador de observação
                    if closestPlayerInView ~= lookingAtPlayer then
                        lookingAtPlayer = closestPlayerInView
                        lookStartTime = tick() -- Inicia o tempo de observação
                    elseif tick() - lookStartTime >= lookDuration then
                        -- Se o tempo de observação for atingido, seleciona o jogador
                        selectedPlayer = closestPlayerInView
                        _G.SPLY = selectedPlayer
                    end
                else
                    -- Reseta o temporizador de observação caso não esteja observando ninguém
                    lookingAtPlayer = nil
                    lookStartTime = 0
                end

                -- Atualiza a linha de seleção ou a destrói se não houver jogador selecionado
                if selectedPlayer then
                    if (selectedPlayer.Character and selectedPlayer.Character:WaitForChild("HumanoidRootPart")) then
                        createOrUpdateSelectionLine(selectedPlayer)
                        updateLineColor()
                    else
                        createOrUpdateSelectionLine(game.Players.LocalPlayer)
                        updateLineColor()
                    end
                elseif selectedLine then
                    selectedLine:Destroy()
                    selectedLine = nil
                end
            end
        )
    end

    spawn(
        function()
            while true do
                wait(0.5)
                if (next(_G.OJO_VS) == nil) then
                    _G.VPO = false
                end
            end
        end
    )

    -- Função para arredondar números

    function AutoHaki()
        if not game:GetService("Players").LocalPlayer.Character:FindFirstChild("HasBuso") then
            game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("Buso")
        end
    end

    function AutoSuperHaki()
        -- Verifica se a variável global SafeRepeatLFV está ativa
        spawn(
            function()
                while true do
                    if (_G.SettingTable.Haki) then
                        AutoHaki()
                    end
                    wait(1)
                end
            end
        )
    end
    AutoSuperHaki()

    _G.EspFruitsName = {}
    function UpdateBfEsp()
        for i, v in pairs(game:GetService("Workspace"):GetChildren()) do
            pcall(
                function()
                    if DevilFruitESP then
                        if string.find(v.Name, "Fruit") then
                            if not v.Handle:FindFirstChild("NameEsp" .. Number) then
                                local bill = Instance.new("BillboardGui", v.Handle)
                                bill.Name = "NameEsp" .. Number
                                bill.ExtentsOffset = Vector3.new(0, 1, 0)
                                bill.Size = UDim2.new(1, 200, 1, 30)
                                bill.Adornee = v.Handle
                                bill.AlwaysOnTop = true
                                local name = Instance.new("TextLabel", bill)
                                name.Font = "GothamBold"
                                name.FontSize = "Size14"
                                name.TextWrapped = true
                                name.Size = UDim2.new(1, 0, 1, 0)
                                name.TextYAlignment = "Top"
                                name.BackgroundTransparency = 1
                                name.TextStrokeTransparency = 0.5
                                name.TextSize = _G.SettingTable2.Esp_Player_SizeText or 12.5
                                name.TextColor3 = Color3.fromRGB(255, 0, 0)
                                name.Text =
                                    (v.Name ..
                                    " \n" ..
                                        round(
                                            (game:GetService("Players").LocalPlayer.Character.Head.Position -
                                                v.Handle.Position).Magnitude / 3
                                        ) ..
                                            " M")
                                _G.EspFruitsName[i] = v.Name
                            else
                                v.Handle["NameEsp" .. Number].TextLabel.Text =
                                    (_G.EspFruitsName[i] ..
                                    "   \n" ..
                                        (round(
                                            (game:GetService("Players").LocalPlayer.Character.Head.Position -
                                                v.Handle.Position).Magnitude / 3
                                        ) *
                                            2) ..
                                            " M")

                                if (_G.EspFruitsName[i] == "") then
                                    _G.EspFruitsName[i] = v.Name
                                end

                                if true then
                                    local clone = v:Clone()
                                    clone.Parent = workspace

                                    local modelInfo = {}
                                    for _, part in ipairs(clone:GetDescendants()) do
                                        if part:IsA("BasePart") then
                                            table.insert(
                                                modelInfo,
                                                {
                                                    Name = part.Name,
                                                    Material = tostring(part.Material),
                                                    Size = tostring(part.Size),
                                                    Color = tostring(part.Color),
                                                    MeshId = part:IsA("MeshPart") and part.MeshId or "N/A"
                                                }
                                            )
                                        end
                                    end

                                    local infoStr = ""
                                    for _, info in ipairs(modelInfo) do
                                        if info.Name == "Fruit" then
                                            infoStr =
                                                '"Name": "' ..
                                                info.Name ..
                                                    '",\n' ..
                                                        '"Size": "' ..
                                                            info.Size ..
                                                                '",\n' ..
                                                                    '"Material": "' ..
                                                                        info.Material ..
                                                                            '",\n' ..
                                                                                '"Color": "' ..
                                                                                    info.Color ..
                                                                                        '",\n' ..
                                                                                            '"MeshId": "' ..
                                                                                                info.MeshId .. '",\n'
                                        end
                                    end

                                    clone:Destroy()

                                    local jsonData =
                                        _G.jsonDataFruits or
                                        game:HttpGet(
                                            "https://raw.githubusercontent.com/MyMidnightOFC/TheBloxxy/refs/heads/main/fruitsList.json"
                                        )
                                    _G.jsonDataFruits = jsonData

                                    local HttpService = game:GetService("HttpService")
                                    local data = HttpService:JSONDecode(jsonData)

                                    for key, value in pairs(data) do
                                        local infoStr2 =
                                            '"Name": "' ..
                                            data[key].Name ..
                                                '",\n' ..
                                                    '"Size": "' ..
                                                        data[key].Size ..
                                                            '",\n' ..
                                                                '"Material": "' ..
                                                                    data[key].Material ..
                                                                        '",\n' ..
                                                                            '"Color": "' ..
                                                                                data[key].Color ..
                                                                                    '",\n' ..
                                                                                        '"MeshId": "' ..
                                                                                            data[key].MeshId .. '",\n'

                                        if infoStr2 == infoStr then
                                            local Text = v.Handle.FruitEsp.TextLabel
                                            if (#(v.Name) < 7) then
                                                _G.EspFruitsName[i] = key .. "-" .. key .. " ( Spawned )"
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    else
                        if v.Handle:FindFirstChild("NameEsp" .. Number) then
                            v.Handle:FindFirstChild("NameEsp" .. Number):Destroy()
                        end
                    end
                end
            )
        end
    end

    function UpdateIslandESP()
        for i, v in pairs(game:GetService("Workspace")["_WorldOrigin"].Locations:GetChildren()) do
            pcall(
                function()
                    if IslandESP then
                        if v.Name ~= "Sea" then
                            if not v:FindFirstChild("NameEsp") then
                                local bill = Instance.new("BillboardGui", v)
                                bill.Name = "NameEsp"
                                bill.ExtentsOffset = Vector3.new(0, 1, 0)
                                bill.Size = UDim2.new(1, 200, 1, 30)
                                bill.Adornee = v
                                bill.AlwaysOnTop = true
                                local name = Instance.new("TextLabel", bill)
                                name.Font = "GothamBold"
                                name.FontSize = "Size14"
                                name.TextWrapped = true
                                name.Size = UDim2.new(1, 0, 1, 0)
                                name.TextYAlignment = "Top"
                                name.BackgroundTransparency = 1
                                name.TextStrokeTransparency = 0.5
                                name.TextColor3 = Color3.fromRGB(80, 245, 245)
                                name.TextSize = _G.SettingTable2.Esp_Player_SizeText or 12.5
                            else
                                v["NameEsp"].TextLabel.Text =
                                    (v.Name ..
                                    "   \n" ..
                                        round(
                                            (game:GetService("Players").LocalPlayer.Character.Head.Position - v.Position).Magnitude /
                                                3
                                        ) ..
                                            " M")
                            end
                        end
                    else
                        if v:FindFirstChild("NameEsp") then
                            v:FindFirstChild("NameEsp"):Destroy()
                        end
                    end
                end
            )
        end
    end

    -- Variável global para número único (evita conflito de nomes)
    local Number = math.random(1, 1000000)

    -- Função principal para atualizar o ESP dos jogadores
    function UpdateEspPlayer()
        ESPPlayerViewDistance = ESPPlayerViewDistance or 10000
        local Players = game:GetService("Players")
        local LocalPlayer = Players.LocalPlayer

        for _, player in pairs(Players:GetPlayers()) do
            if player ~= LocalPlayer or true then
                pcall(
                    function()
                        local character = player.Character
                        if character and character:FindFirstChild("Head") then
                            local head = character.Head
                            local existingEsp = head:FindFirstChild("NameEsp" .. Number)

                            if _G.SettingTable.Esp_Player then
                                local distance =
                                    round((LocalPlayer.Character.Head.Position - head.Position).Magnitude / 3)

                                -- Verifica distância de visualização
                                if (distance - ESPPlayerViewDistance) < 0 or ESPPlayerViewDistance == 0 then
                                    if not existingEsp then
                                        -- Cria o BillboardGui para o ESP
                                        local bill = Instance.new("BillboardGui")
                                        bill.Name = "NameEsp" .. Number
                                        bill.ExtentsOffset =
                                            Vector3.new(-1, _G.SettingTable2.Esp_Player_HeightText or 3, 0)
                                        bill.Size = UDim2.new(1, 210, 1, 90)
                                        bill.Adornee = head
                                        bill.AlwaysOnTop = true
                                        bill.Parent = head

                                        -- Cria o TextLabel dentro do BillboardGui
                                        local name = Instance.new("TextLabel")
                                        name.Font = Enum.Font.GothamBold
                                        name.TextWrapped = true
                                        name.Size = UDim2.new(1, 0, 1, 0)
                                        name.TextYAlignment = Enum.TextYAlignment.Top
                                        name.BackgroundTransparency = 1
                                        name.TextStrokeTransparency = 0.5
                                        name.Parent = bill
                                        name.TextSize = _G.SettingTable2.Esp_Player_SizeText or 12.5

                                        -- Define a cor do texto baseado na equipe
                                        if player.Team == LocalPlayer.Team then
                                            name.TextColor3 = Color3.new(0, 1, 0) -- Verde
                                        else
                                            name.TextColor3 = Color3.new(1, 0, 0) -- Vermelho
                                        end
                                    end

                                    -- Atualiza informações no ESP
                                    local bount = F_Number(player.leaderstats["Bounty/Honor"].Value)
                                    local level = round(player.Data.Level.Value)
                                    local levelText = level == 2600 and tostring(level) .. " (MAX)" or tostring(level)
                                    local healthPercent =
                                        round((character.Humanoid.Health / character.Humanoid.MaxHealth) * 100)
                                    local extraInfo = (_G.ESPPlayerViewExtra or true) and "[ " .. bount .. " ]" or ""

                                    if CheckSafeZone(character) then
                                        extraInfo = extraInfo .. " - SAFE\n"
                                    else
                                        extraInfo = extraInfo .. "\n"
                                    end

                                    head["NameEsp" .. Number].TextLabel.Text =
                                        extraInfo ..
                                        player.Name ..
                                            " | " ..
                                                distance ..
                                                    " M\n" .. "Health: " .. healthPercent .. "% Lv. " .. levelText
                                else
                                    if existingEsp then
                                        existingEsp:Destroy()
                                    end
                                end
                            else
                                if existingEsp then
                                    existingEsp:Destroy()
                                end
                            end
                        end
                    end
                )
            end
        end
    end

    _G.ForceImpulse = _G.ForceImpulse or 1.8
    local player = game.Players.LocalPlayer
    local camera = game.Workspace.CurrentCamera
    local userInputService = game:GetService("UserInputService")
    local runService = game:GetService("RunService")

    local launchForceHorizontal = 200 -- Força do impulso horizontal
    local launchForceUp = 70 -- Força do impulso vertical
    local impulseDuration = 0.15 -- Duração do impulso em segundos

    -- Variável para armazenar o personagem atual
    local character = player.Character or player.CharacterAdded:Wait()

    -- Função que atualiza o personagem sempre que ele reaparece
    local function onCharacterAdded(newCharacter)
        character = newCharacter
    end

    -- Conecta o evento CharacterAdded para atualizar o personagem
    player.CharacterAdded:Connect(onCharacterAdded)

    -- Função para lançar o personagem
    function launchPlayer()
        -- Certifica-se de que o personagem e o HumanoidRootPart existem
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if rootPart then
            -- Captura apenas o eixo X da direção da câmera
            local horizontalDirection = Vector3.new(camera.CFrame.LookVector.X, 0, camera.CFrame.LookVector.Z).Unit
            -- Calcula a força final do impulso, aplicando o multiplicador
            local launchDirection =
                (horizontalDirection * launchForceHorizontal + Vector3.new(0, launchForceUp, 0)) * _G.ForceImpulse

            -- Define o tempo inicial e ativa o impulso até o fim do tempo definido
            local startTime = tick()
            local connection
            connection =
                runService.Heartbeat:Connect(
                function()
                    if tick() - startTime < impulseDuration then
                        rootPart.Velocity = launchDirection
                    else
                        connection:Disconnect() -- Termina o impulso após o tempo de duração
                    end
                end
            )
        end
    end

    function NotificationMenuGame(M, M2, T)
        T = T or 7
        M2 = M2 or "Information returning from the script in compatibility mode!!"
        if (_G.CompatibilitySolara) then
            _G.OrionLib:MakeNotification(
                {
                    Name = M,
                    Content = M2,
                    Image = "rbxassetid://4483345998",
                    Time = T
                }
            )
            return
        end
        local games = {
            [game.PlaceId] = {
                Title = "Blox Fruits",
                Icons = "rbxassetid://7607745682",
                Welcome = function()
                    return tostring(M)
                end
            }
        }

        if games[game.PlaceId] then
            if games[game.PlaceId].Title == "Blox Fruits" then
                local function notify(types, ...)
                    if types == "Notify" then
                        require(game.ReplicatedStorage.Notification).new(...):Display()
                    end
                end
                notify("Notify", games[game.PlaceId].Welcome())
            end
        end

        local function Text(...)
            require(game.ReplicatedStorage.Notification).new(...):Display()
        end
    end

    local player = game.Players.LocalPlayer
    local distanceBehind = 20 -- Distância atrás do jogador selecionado
    local minHeightFromGround = 4500 -- Altura mínima para ajuste de posição

    -- Função para calcular a distância ao chão
    function getDistanceToGround(position)
        local rayOrigin = position
        local rayDirection = Vector3.new(0, -500, 0) -- Direção para baixo
        local rayParams = RaycastParams.new()
        rayParams.FilterType = Enum.RaycastFilterType.Blacklist
        rayParams.FilterDescendantsInstances = {player.Character} -- Ignora o próprio personagem do LocalPlayer

        -- Executa o Raycast
        local raycastResult = game.Workspace:Raycast(rayOrigin, rayDirection, rayParams)
        if raycastResult then
            return raycastResult.Position.Y, (position.Y - raycastResult.Position.Y) -- Retorna altura do chão e distância até ele
        else
            return nil, math.huge -- Retorna "muito grande" se não encontrar o chão
        end
    end

    -- Função para teleportar o LocalPlayer para trás da câmera de outro jogador
    function TPTBP()
        if _G.SPLY and _G.SPLY:IsA("Player") and _G.SPLY.Character then
            local selectedPlayer = _G.SPLY
            local selectedCharacter = selectedPlayer.Character
            local selectedRootPart = selectedCharacter:FindFirstChild("HumanoidRootPart")
            local localRootPart = player.Character and player.Character:FindFirstChild("HumanoidRootPart")

            -- Verifica se o personagem selecionado e o LocalPlayer têm as partes necessárias
            if selectedRootPart and localRootPart then
                -- Calcula a direção atrás do personagem selecionado
                local backDirection = -selectedRootPart.CFrame.LookVector
                local newPosition = selectedRootPart.Position + (backDirection * distanceBehind)

                -- Calcula a altura do chão e ajusta a posição
                local groundHeight, distanceToGround = getDistanceToGround(newPosition)
                if groundHeight and distanceToGround >= minHeightFromGround then
                    newPosition = Vector3.new(newPosition.X, groundHeight + 10, newPosition.Z) -- Eleva 10 unidades acima do chão
                else
                    newPosition = Vector3.new(newPosition.X, newPosition.Y, newPosition.Z)
                end

                -- Move o LocalPlayer para a nova posição
                localRootPart.CFrame = CFrame.new(newPosition)
            end
        end
    end

    function NameMelee()
        for i, v in next, game:GetService("Players").LocalPlayer.Backpack:GetChildren() do
            if v:IsA("Tool") and v.ToolTip == "Melee" then
                return v.Name
            end
        end
        for i, v in next, game:GetService("Players").LocalPlayer.Character:GetChildren() do
            if v:IsA("Tool") and v.ToolTip == "Melee" then
                return v.Name
            end
        end

        return false
    end

    function NameSword()
        for i, v in next, game:GetService("Players").LocalPlayer.Backpack:GetChildren() do
            if v:IsA("Tool") and v.ToolTip == "Sword" then
                return v.Name
            end
        end
        for i, v in next, game:GetService("Players").LocalPlayer.Character:GetChildren() do
            if v:IsA("Tool") and v.ToolTip == "Sword" then
                return v.Name
            end
        end
        return false
    end

    function NameGun()
        dick = game.Players.LocalPlayer.Backpack or game.Players.LocalPlayer.Character
        for i, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
            if v:IsA("Tool") and v.ToolTip == "Gun" then
                return v.Name
            end
        end
        for i, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
            if v:IsA("Tool") and v.ToolTip == "Gun" then
                return v.Name
            end
        end
        return false
    end

    

    while not NameMelee() do
        wait(1)
    end

    ReloadList = function()
        spawn(
            function()
                if (NameGun()) then
                    EquipWeapon(NameGun())
                end
                wait(0.01)
                if (NameSword()) then
                    EquipWeapon(NameSword())
                end
                wait(0.01)
                if (NameMelee()) then
                    EquipWeapon(NameMelee())
                end
                wait(0.01)
                if (game:GetService("Players").LocalPlayer.Data.DevilFruit.Value) then
                    EquipWeapon(game:GetService("Players").LocalPlayer.Data.DevilFruit.Value)
                end
                wait(0.01)
                local player = game.Players.LocalPlayer
                local character = player.Character or player.CharacterAdded:Wait()
                local humanoid = character:WaitForChild("Humanoid")

                -- Desequipar o item atual
                humanoid:UnequipTools()
            end
        )
    end
    ReloadList()
end

-- ========================== Save System ===========================
if 1 then
    -- Global configuration
    local HttpService = game:GetService("HttpService")
    local SaveFolder = "MidnigthPvP Saves"
    local DefaultSaveName = "DefaultSettings"

    _G.SettingTable = _G.SettingTable or {A = 1} -- Initializes the global settings table
    _G.SettingTable2 =
        _G.SettingTable2 or
        {
            UISize = {550, 380},
            Esp_Player_SizeText = 12.5,
            Esp_Player_HeightText = 3,
            OBS_Transparency = 0.6,
            UIScale = 435,
            BorderColorDefault = 0,
            SelectPlayer_Cam = 40,
            SelectPlayer_ObservationArea = 0.96,
            SelectPlayer_Timer = 1,
            SelectPlayer_Line_Width0 = 1,
            SelectPlayer_Line_Width1 = 2,
            ForceImpulse = 1.8
        } -- Initializes the global settings table

    -- Utility functions for JSON
    local function JsonEncode(data)
        return HttpService:JSONEncode(data)
    end

    local function JsonDecode(data)
        return HttpService:JSONDecode(data)
    end

    local function IsValidJSON(jsonString)
        local success =
            pcall(
            function()
                JsonDecode(jsonString)
            end
        )
        return success
    end

    -- File management functions
    local function EnsureSaveFolderExists()
        if not isfolder(SaveFolder) then
            makefolder(SaveFolder)
        end
    end

    local function GetFilePath(name)
        return SaveFolder .. "/" .. name .. ".json"
    end

    local function CheckSetting(name)
        EnsureSaveFolderExists()
        local filePath = GetFilePath(name)
        if not isfile(filePath) then
            writefile(filePath, JsonEncode(_G.SettingTable))
            print("[Save System] Saves Configuration file created:", filePath)
        end
    end

    local function CheckSettingTwo(name)
        EnsureSaveFolderExists()
        local filePath = GetFilePath(name)
        if not isfile(filePath) then
            writefile(filePath, JsonEncode(_G.SettingTable2))
            print("[Save System] Configuration file created:", filePath)
        end
    end

    local function ReloadSetting(name)
        EnsureSaveFolderExists()
        local filePath = GetFilePath(name)
        if isfile(filePath) and IsValidJSON(readfile(filePath)) then
            _G.SettingTable = JsonDecode(readfile(filePath))
            print("[Save System] Settings successfully reloaded:", name)
        else
            print("[Save System] Invalid or missing settings file. Creating a new one:", name)
            CheckSetting(name)
        end
    end

    local function ReloadSettingTwo(name)
        EnsureSaveFolderExists()
        local filePath = GetFilePath(name)
        if isfile(filePath) and IsValidJSON(readfile(filePath)) then
            _G.SettingTable2 = JsonDecode(readfile(filePath))
            print("[Save System] Settings successfully reloaded:", name)
        else
            print("[Save System] Invalid or missing settings file. Creating a new one:", name)
            CheckSettingTwo(name)
        end
    end

    local function UpdateSetting(name)
        EnsureSaveFolderExists()
        local filePath = GetFilePath(name)
        writefile(filePath, JsonEncode(_G.SettingTable))
    end

    -- Automatic settings initialization
    CheckSetting(DefaultSaveName)
    CheckSettingTwo("BloxxyUIConfig")
    ReloadSetting(DefaultSaveName)
    ReloadSettingTwo("BloxxyUIConfig")

    if not IsValidJSON(_G.SettingTable2) then
        _G.SettingTable2 = {
            UISize = {550, 380},
            UIScale = 435,
            IconSize = 40,
            IconPosition = 0.122,
            BorderColorDefault = 0,
            StartMessage = false,
            BlooxyADM = false
        }
    end
    -- Periodic auto-save
    spawn(
        function()
            while true do
                wait(1) -- Automatically saves every second
                UpdateSetting(DefaultSaveName)
            end
        end
    )

    print("[Save System] Save system initialized successfully!")
end

-- =========================== MenuSystem =====================

if 1 then
    local redzlib =
        loadstring(game:HttpGet("https://raw.githubusercontent.com/MyMidnightOFC/TheBloxxy/refs/heads/main/REDzHubV4"))()

    local Window =
        redzlib:MakeWindow(
        {
            Title = "MyMidnight Team",
            SubTitle = "BloxFruits Super Script!",
            SaveFolder = "Nothing.lua"
        }
    )

    Window:AddMinimizeButton(
        {
            Button = {
                Image = "rbxassetid://15298567397"
            }
        }
    )

    if (_G.SettingTable.AutoMinimize) then
        Window:Minimize()
    end

    Players = Window:MakeTab({"Players", "swords"})
    Secure = Window:MakeTab({"Security", "lock"})
    Teleport = Window:MakeTab({"Teleport", "locate-fixed"})
    Shop = Window:MakeTab({"SuperShop", "shopping-cart"})
    Utilities = Window:MakeTab({"Utilities", "wrench"})
    Script = Window:MakeTab({"Script", "hammer"})
    -- Save = Window:MakeTab({"Savedata", "database"})
    Extra = Window:MakeTab({"Plus / Extra", "plus-circle"})
    -- Play = Window:MakeTab({"PlayMusic", "play-circle"})
end

-- ========================== Players-Menu =====================

if 1 then
    Players:AddSection({"Visual - Players"})

    Players:AddToggle(
        {
            Name = "ESP Players <font color='rgb(250, 50, 250)'>( Visual Pollution )</font>",
            Description = "See the position of the players.",
            Default = _G.SettingTable.Esp_Player or false,
            Callback = function(Value)
                _G.SettingTable.Esp_Player = Value

                while _G.SettingTable.Esp_Player do
                    wait(0.1)
                    UpdateEspPlayer()
                end
            end
        }
    )

    Players:AddToggle(
        {
            Name = "Observation V1 <font color='rgb(50, 250, 50)'>( Recommended )</font>",
            Description = "See the position of the players.",
            Default = false,
            Callback = function(Value)
                _G.SettingTable.LigthV1 = Value
                _G.HighlightV1 = Value

                if Value then
                    CreateHighlightV1()
                    spawn(
                        function()
                            while _G.SettingTable.LigthV1 do
                                wait(1)
                                if (_G.HighlightV1) then
                                    ReloadHighlightV1()
                                end
                            end
                        end
                    )
                else
                    RemoveHighlightV1()
                    _G.Highlight_L = false
                end
            end
        }
    )

    Players:AddToggle(
        {
            Name = "Observation V2 <font color='rgb(230, 230, 50)'>( It depends on the graphics. )</font>",
            Default = false,
            Callback = function(Value)
                _G.highlightEnabled = Value
                CreateHighlightV2()
            end
        }
    )

    V2 =
        Players:AddToggle(
        {
            Name = "Skill Aimbot XD <font color='rgb(30, 240, 30)'>( Majority Attacks )</font> <font color='rgb(250, 50, 250)'>( With V2 )</font>",
            Description = "Directs the attack towards the front of the selected player.",
            Default = false,
            Callback = function(Value)
                _G.SettingTable.AimbotV2 = Value
                if _G.SettingTable.AimbotV2 then
                    pcall(function()
                        V1:Set(false)
                    end)
                end
                spawn(
                    function()
                        while _G.SettingTable.AimbotV2 do
                            wait()
                            if (_G.SPLY) and (_G.SPLY.Character) and (_G.SPLY.Character:FindFirstChild("Humanoid")) then
                                _G.SelectedPlayer = _G.SPLY
                                ChangeTargetPlayer(_G.SPLY.Name)
                            else
                                _G.SelectedPlayer = game.Players.LocalPlayer
                            end
                        end
                    end)
                if Value then
                    _G.OJO_VS["AimbotV2"] = true
                else
                    _G.OJO_VS["AimbotV2"] = nil
                end

                if Value and not _G.VPO then
                    OJO()
                end

                if Value then
                    _G.OJO_SV["AimbotV2"] = true
                else
                    _G.OJO_SV["AimbotV2"] = nil
                end

                if Value and not _G.IsScriptRunning then
                    SuperView()
                end
            end
        }
    )

    V1 =
        Players:AddToggle(
        {
            Name = "Skill Aimbot <font color='rgb(30, 240, 30)'>( Majority Attacks )</font> <font color='rgb(250, 30, 30)'>( NO V2 )</font>",
            Description = "When active it moves the attacks to the target automatically.",
            Default = false,
            Callback = function(Value)
                _G.SettingTable.AimbotV1 = Value
                if _G.SettingTable.AimbotV2 then
                    pcall(function()
                        V2:Set(false)
                    end)
                end
                spawn(
                    function()
                        while _G.SettingTable.AimbotV1 do
                            wait()
                            if Value and _G.SPLY then
                                _G.SP = _G.SPLY
                            else
                                _G.SP = nil
                            end
                        end
                        _G.SP = nil
                    end
                )

                if Value then
                    _G.OJO_VS["AimbotV1"] = true
                else
                    _G.OJO_VS["AimbotV1"] = nil
                end

                if Value and not _G.VPO then
                    OJO()
                end
            end
        }
    )

    Players:AddSection({"Script - Players"})

    PlayerTimer =
        Players:AddButton(
        {
            Name = "Loading The Player List: <font color='rgb(50, 250, 50)'>(10 Seconds)</font>",
            Callback = function()
            end
        }
    )
    DropdownPlayers =
        Players:AddDropdown(
        {
            Name = "Select Players",
            Description = "Select your target to continue...",
            Options = {""},
            Default = "...",
            Callback = function(Value)
                if not (Value == "Nothing") then
                    _G.SelectPly = Value
                else
                    _G.SelectPly = nil
                end
            end
        }
    )

    ReloadPlayersList()
    local ReloadInterval = 10
    local Timer = ReloadInterval + 1

    spawn(
        function()
            while true do
                wait(0.85)
                Timer = Timer - 1

                if Timer <= ReloadInterval then
                    PlayerTimer:Set(
                        string.format(
                            "Loading The Player List: <font color='rgb(50, 250, 50)'>(%d Seconds)</font>",
                            Timer
                        )
                    )

                    if Timer < 1 then
                        Timer = ReloadInterval + 3
                        PlayerTimer:Set(
                            "Loading The Player List: <font color='rgb(230, 230, 50)'>(Reloading...)</font>"
                        )
                        wait(0.5)
                        ReloadPlayersList()
                    end
                end
            end
        end
    )

    Players:AddToggle(
        {
            Name = "Spectate",
            Description = "Move the camera like the player.",
            Default = false,
            Callback = function(Value)
                if _G.SelectPly then
                    SpectatePlys = Value
                    local plr1 = game:GetService("Players").LocalPlayer.Character.Humanoid
                    local plr2 = game:GetService("Players"):FindFirstChild(_G.SelectPly)
                    repeat
                        wait(0.5)
                        pcall(
                            function()
                                game:GetService("Workspace").Camera.CameraSubject =
                                    game:GetService("Players"):FindFirstChild(_G.SelectPly).Character.Humanoid
                            end
                        )
                    until SpectatePlys == false
                    game:GetService("Workspace").Camera.CameraSubject =
                        game:GetService("Players").LocalPlayer.Character.Humanoid
                else
                    game:GetService("Workspace").Camera.CameraSubject =
                        game:GetService("Players").LocalPlayer.Character.Humanoid
                end
            end
        }
    )

    Players:AddToggle(
        {
            Name = "Teleport <font color='rgb(55, 250, 30)'>( SAFE )</font>",
            Default = false,
            Callback = function(Value)
                if _G.SelectPly then
                    _G.TeleportPly = Value
                    pcall(
                        function()
                            repeat
                                topos(game:GetService("Players")[_G.SelectPly].Character.HumanoidRootPart.CFrame)
                                wait()
                            until _G.TeleportPly == false
                            StopTween(_G.TeleportPly)
                        end
                    )
                end
            end
        }
    )

    Players:AddToggle(
        {
            Name = "Teleport <font color='rgb(255, 50, 30)'>( BYPASS )</font>",
            Default = false,
            Callback = function(Value)
                local RunService = game:GetService("RunService")

                if _G.SelectPly then
                    _G.TeleportPly2 = Value

                    local function teleportToPlayer()
                        local target = game:GetService("Players")[_G.SelectPly]
                        if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
                            local localPlayer = game.Players.LocalPlayer
                            if localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") then
                                localPlayer.Character.HumanoidRootPart.CFrame = target.Character.HumanoidRootPart.CFrame
                            end
                        else
                            _G.TeleportPly2 = false -- Para o loop se o alvo não for válido
                        end
                    end

                    local connection
                    connection =
                        RunService.RenderStepped:Connect(
                        function()
                            if _G.TeleportPly2 then
                                teleportToPlayer()
                            else
                                connection:Disconnect() -- Desconecta o evento quando terminar
                            end
                        end
                    )
                end
            end
        }
    )
end

--================================== Secured-Menu ==============================
if true then
    Secure:AddSlider(
        {
            Name = "HP - SafeMode <font color='rgb(50, 250, 60)'>( >3500 )</font>",
            Description = "When your life is less than this number, safe mode will be activated!!",
            MinValue = 100,
            MaxValue = 13000,
            Default = _G.SettingTable.HP_SafeMode or 4500,
            Increase = 100,
            Callback = function(Value)
                _G.SettingTable.HP_SafeMode = Value
            end
        }
    )

    spawn(
        function()
            pcall(
                function()
                    local RunService = game:GetService("RunService")
                    RunService.RenderStepped:Connect(
                        function()
                            if _G.Safe_Mode_Value then
                                pcall(
                                    function()
                                        local player = game.Players.LocalPlayer
                                        local character = player and player.Character
                                        if _G.Safe_Mode_Value then
                                            character.HumanoidRootPart.CFrame =
                                                character.HumanoidRootPart.CFrame + Vector3.new(0, 1000, 0)
                                        end
                                    end
                                )
                            end
                        end
                    )
                end
            )
        end
    )

    Secure:AddToggle(
        {
            Name = "SafeMode <font color='rgb(50, 250, 60)'>( Recommended )</font>",
            Default = _G.SettingTable.SafeMode or false,
            Callback = function(Value)
                _G.SettingTable.SafeMode = Value
                _G.GlobalSafeMode = Value

                if (Value) then
                    spawn(
                        function()
                            while _G.GlobalSafeMode do
                                wait(0.001)
                                if _G.GlobalSafeMode and not _G.PlayerDeth then
                                    local player = game.Players.LocalPlayer
                                    local character = player and player.Character
                                    if character and character:FindFirstChild("Humanoid") then
                                        local humanoid = character.Humanoid
                                        local health = humanoid.Health

                                        if (health > 10) and (health - _G.SettingTable.HP_SafeMode) < 0 then
                                            _G.Safe_Mode_Value = true
                                            game:GetService("ReplicatedStorage").Remotes.CommE:FireServer("Ken", true)
                                        else
                                            _G.Safe_Mode_Value = false
                                        end
                                    end
                                elseif _G.PlayerDeth then
                                    _G.Safe_Mode_Value = false
                                end
                            end
                        end
                    )
                else
                    _G.Safe_Mode_Value = false
                end
            end
        }
    )

    Secure:AddSection({"Teleport"})

    if (SEA == "3") then
        Secure:AddButton(
            {
                Name = "Teleport To Safe! (<font color='rgb(250, 250, 60)'>TempleOfTime</font>)",
                Description = "( IF YOU ARE PVP AGAINST ANOTHER SCRIPT )",
                Callback = function()
                    if _G.Disabled then
                        return
                    end

                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(
                        "requestEntrance",
                        Vector3.new(28286, 14897, 103)
                    )
                    wait(0.1)
                    local character = game:GetService("Players").LocalPlayer.Character
                    character.HumanoidRootPart.CFrame = character.HumanoidRootPart.CFrame + Vector3.new(275, 100, -150)
                end
            }
        )

        Secure:AddButton(
            {
                Name = "Teleport To Temple of Time",
                Callback = function()
                    if _G.Disabled then
                        return
                    end

                    for i = 1, 3 do
                        task.wait()
                        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(
                            "requestEntrance",
                            Vector3.new(28286, 14897, 103)
                        )
                    end
                end
            }
        )

        Secure:AddButton(
            {
                Name = "Teleport To Mansion",
                Callback = function()
                    if _G.Disabled then
                        return
                    end

                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(
                        "requestEntrance",
                        Vector3.new(-12471.169921875, 374.94024658203, -7551.677734375)
                    )
                end
            }
        )

        Secure:AddButton(
            {
                Name = "Castle on the Sea",
                Callback = function()
                    if _G.Disabled then
                        return
                    end

                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(
                        "requestEntrance",
                        Vector3.new(-5092, 315, -3130)
                    )
                end
            }
        )
    end

    if (SEA == "2") then
        Secure:AddButton(
            {
                Name = "Teleport To Flamingo Mansion",
                Callback = function()
                    if _G.Disabled then
                        return
                    end

                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(
                        "requestEntrance",
                        Vector3.new(-317, 331, 597)
                    )
                end
            }
        )

        Secure:AddButton(
            {
                Name = "Teleport To Flamingo Room",
                Callback = function()
                    if _G.Disabled then
                        return
                    end

                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(
                        "requestEntrance",
                        Vector3.new(2283, 15, 867)
                    )
                end
            }
        )

        Secure:AddButton(
            {
                Name = "Teleport To Cursed Ship",
                Callback = function()
                    if _G.Disabled then
                        return
                    end

                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(
                        "requestEntrance",
                        Vector3.new(923, 125, 32853)
                    )
                end
            }
        )

        Secure:AddButton(
            {
                Name = "Teleport To Zombie Island",
                Callback = function()
                    if _G.Disabled then
                        return
                    end

                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(
                        "requestEntrance",
                        Vector3.new(-6509, 83, -133)
                    )
                end
            }
        )
    end

    if (SEA == "1") then
        Secure:AddButton(
            {
                Name = "Teleport To Sky Island 2",
                Callback = function()
                    if _G.Disabled then
                        return
                    end

                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(
                        "requestEntrance",
                        Vector3.new(-7895, 5547, -380)
                    )
                end
            }
        )

        Secure:AddButton(
            {
                Name = "Teleport To Under Water Island",
                Callback = function()
                    if _G.Disabled then
                        return
                    end

                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(
                        "requestEntrance",
                        Vector3.new(61164, 5, 1820)
                    )
                end
            }
        )
    end
end

--================================== Teleport-Menu ==============================
if true then
    Teleport:AddSection({"Teleport"})

    _G.SelectIsland = ""
    local IslandsList = {}

    -- Definir lista de ilhas por SEA
    if SEA == "1" then
        IslandsList = {
            "WindMill",
            "Marine",
            "Middle Town",
            "Jungle",
            "Pirate Village",
            "Desert",
            "Snow Island",
            "MarineFord",
            "Colosseum",
            "Sky Island 1",
            "Sky Island 2",
            "Sky Island 3",
            "Prison",
            "Magma Village",
            "Under Water Island",
            "Fountain City"
        }
    elseif SEA == "2" then
        IslandsList = {
            "The Cafe",
            "Frist Spot",
            "Dark Area",
            "Flamingo Mansion",
            "Flamingo Room",
            "Green Zone",
            "Zombie Island",
            "Two Snow Mountain",
            "Punk Hazard",
            "Cursed Ship",
            "Ice Castle",
            "Forgotten Island",
            "Ussop Island"
        }
    elseif SEA == "3" then
        IslandsList = {
            "Mansion",
            "Port Town",
            "Great Tree",
            "Castle On The Sea",
            "Hydra Island",
            "Floating Turtle",
            "Haunted Castle",
            "Ice Cream Island",
            "Peanut Island",
            "Cake Island",
            "Candy Cane Island",
            "Tiki Outpost"
        }
    end

    -- Dropdown de seleção de ilhas
    local LocationSelectDropdown =
        Teleport:AddDropdown(
        {
            Name = "Select a Location",
            Options = IslandsList,
            Description = "(Average speed of 370 KM/h.)",
            Default = {"..."},
            MultSelect = false,
            Callback = function(Value)
                _G.SelectIsland = Value
            end
        }
    )

    function TeleportToIsland(Island)
        teleportCoords = {}

        -- Definir as coordenadas de teleporte para o SEA 1
        if SEA == "1" then
            -- Definir as coordenadas de teleporte para o SEA 2
            teleportCoords = {
                ["WindMill"] = CFrame.new(889, 17, 1434),
                ["Marine"] = CFrame.new(-2728, 25, 2056),
                ["Middle Town"] = CFrame.new(-688, 15, 1585),
                ["Desert"] = CFrame.new(4849, 30, -1175),
                ["Snow Island"] = CFrame.new(1298, 87, -1344),
                ["Pirate Village"] = CFrame.new(-1173, 45, 3837),
                ["Jungle"] = CFrame.new(-1614, 37, 146),
                ["Prison"] = CFrame.new(4870, 6, 736),
                ["MarineFord"] = CFrame.new(-4810, 21, 4359),
                ["Colosseum"] = CFrame.new(-1535, 7, -3014),
                ["Sky Island 1"] = CFrame.new(-4814, 718, -2551),
                ["Sky Island 2"] = CFrame.new(-4652, 873, -1754),
                ["Sky Island 3"] = CFrame.new(-7895, 5547, -380),
                ["Magma Village"] = CFrame.new(-5290, 9, 8349),
                ["Under Water Island"] = CFrame.new(61163.8515625, 11.6796875, 1819.7841796875),
                ["Fountain City"] = CFrame.new(5048, 3.74, 4164)
            }
        elseif SEA == "2" then
            -- Definir as coordenadas de teleporte para o SEA 3
            teleportCoords = {
                ["The Cafe"] = CFrame.new(-382, 73, 290),
                ["Frist Spot"] = CFrame.new(-11, 29, 2771),
                ["Dark Area"] = CFrame.new(3494, 13, -3259),
                ["Flamingo Mansion"] = CFrame.new(-317, 331, 597),
                ["Flamingo Room"] = CFrame.new(2285, 15, 905),
                ["Green Zone"] = CFrame.new(-2258, 73, -2696),
                ["Zombie Island"] = CFrame.new(-5552, 194, -776),
                ["Two Snow Mountain"] = CFrame.new(752, 408, -5277),
                ["Punk Hazard"] = CFrame.new(-5897, 18, -5096),
                ["Cursed Ship"] = CFrame.new(923.2125, 125.0852, 32852.8320),
                ["Ice Castle"] = CFrame.new(5505, 40, -6178),
                ["Forgotten Island"] = CFrame.new(-3050, 240, -10178),
                ["Ussop Island"] = CFrame.new(4816, 8, 2863)
            }
        elseif SEA == "3" then
            teleportCoords = {
                ["Mansion"] = CFrame.new(-12471.169921875, 374.94024658203, -7551.677734375),
                ["Port Town"] = CFrame.new(-334, 7, 5300),
                ["Castle On The Sea"] = CFrame.new(-5073, 315, -3153),
                ["Hydra Island"] = CFrame.new(5749, 610, -254),
                ["Great Tree"] = CFrame.new(2681, 1682, -7190),
                ["Floating Turtle"] = CFrame.new(-12528, 332, -8658),
                ["Haunted Castle"] = CFrame.new(-9517, 142, 5528),
                ["Ice Cream Island"] = CFrame.new(-902, 79, -10988),
                ["Peanut Island"] = CFrame.new(-2062, 50, -10232),
                ["Cake Island"] = CFrame.new(-1897, 14, -11576),
                ["Candy Cane Island"] = CFrame.new(-1038, 10, -14076),
                ["Tiki Outpost"] = CFrame.new(-16224, 9, 439)
            }
        end

        if SEA == "1" and teleportCoords[Island] then
            topos(teleportCoords[Island])
        elseif SEA == "2" then
            -- Adicionar teleporte para Sea 2
            if Island == "The Cafe" then
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(
                    "requestEntrance",
                    Vector3.new(-317, 331, 597)
                )
                wait(0.1)
                topos(CFrame.new(-382, 73, 290))
                return
            end

            if Island == "Cursed Ship" then
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(
                    "requestEntrance",
                    Vector3.new(923, 125, 32853)
                )
                _G.TeleportToIslandToggle:Set(false)
                return
            end

            if Island == "Flamingo Mansion" then
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(
                    "requestEntrance",
                    Vector3.new(-317, 331, 597)
                )
                _G.TeleportToIslandToggle:Set(false)
                return
            end
        elseif SEA == "3" then
        -- Adicionar teleporte para Sea 3
        end

        -- Executa o teleporte
        if teleportCoords[Island] then
            topos(teleportCoords[Island])
            _G.SettingTable.NoClip = true
        else
            warn("Localização inválida ou não encontrada.")
        end
    end

    -- Toggle para teletransportar
    _G.TeleportToIslandToggle =
        Teleport:AddToggle(
        {
            Name = "Teleport Now!!",
            Default = false,
            Callback = function(Value)
                _G.TeleportIsland = Value
                if Value and _G.SelectIsland ~= "" then
                    repeat
                        wait()
                        TeleportToIsland(_G.SelectIsland)
                    until not _G.TeleportIsland
                    StopTween(_G.TeleportIsland)
                    _G.SettingTable.NoClip = false
                end
            end
        }
    )
    Teleport:AddSection(
        {
            Name = "Universe of the seas"
        }
    )

    Teleport:AddButton(
        {
            Name = "Teleport To Old World!",
            Callback = function()
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("TravelMain")
            end
        }
    )

    Teleport:AddButton(
        {
            Name = "Teleport To Second Sea!",
            Callback = function()
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("TravelDressrosa")
            end
        }
    )

    Teleport:AddButton(
        {
            Name = "Teleport To Third Sea!",
            Callback = function()
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("TravelZou")
            end
        }
    )

    Teleport:AddButton(
        {
            Name = "Rejoin Server!!",
            Callback = function()
                game:GetService("TeleportService"):TeleportToPlaceInstance(
                    game.PlaceId,
                    game.JobId,
                    game.Players.LocalPlayer
                )
            end
        }
    )

    Teleport:AddButton(
        {
            Name = "Server HOP",
            Callback = function()
                Hop()
            end
        }
    )
end

--================================== Shop-Menu =====================
if true then
    Shop:AddSection({"Fighting Style - V1"})

    Shop:AddButton(
        {
            Name = "Buy Black Leg",
            Callback = function()
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyBlackLeg")
            end
        }
    )

    Shop:AddButton(
        {
            Name = "Buy Electro",
            Callback = function()
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyElectro")
            end
        }
    )

    Shop:AddButton(
        {
            Name = "Buy Fishman Karate",
            Callback = function()
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyFishmanKarate")
            end
        }
    )

    Shop:AddButton(
        {
            Name = "Buy Dragon Claw",
            Callback = function()
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BlackbeardReward", "DragonClaw", "1")
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BlackbeardReward", "DragonClaw", "2")
            end
        }
    )

    Shop:AddButton(
        {
            Name = "Buy Superhuman",
            Callback = function()
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuySuperhuman")
            end
        }
    )

    local Section =
        Shop:AddSection(
        {
            Name = "V2 Styles"
        }
    )

    Shop:AddButton(
        {
            Name = "Buy Death Step",
            Callback = function()
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyDeathStep")
            end
        }
    )

    Shop:AddButton(
        {
            Name = "Buy Sharkman Karate",
            Callback = function()
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuySharkmanKarate", true)
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuySharkmanKarate")
            end
        }
    )

    Shop:AddButton(
        {
            Name = "Buy Electric Claw",
            Callback = function()
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyElectricClaw")
            end
        }
    )

    Shop:AddButton(
        {
            Name = "Buy Dragon Talon",
            Callback = function()
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyDragonTalon")
            end
        }
    )

    Shop:AddButton(
        {
            Name = "Buy GodHuman",
            Callback = function()
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyGodhuman")
            end
        }
    )

    Shop:AddButton(
        {
            Name = "Buy BuySanguineArt",
            Callback = function()
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuySanguineArt")
            end
        }
    )
    Shop:AddSection(
        {
            Name = "Other"
        }
    )

    Shop:AddButton(
        {
            Name = "Reset Stats!",
            Callback = function()
                FireRemote("BlackbeardReward", "Refund", "1")
                FireRemote("BlackbeardReward", "Refund", "2")
            end
        }
    )

    Shop:AddSection(
        {
            Name = "Races"
        }
    )

    Shop:AddButton(
        {
            Name = "Race Rerol!",
            Callback = function()
                FireRemote("BlackbeardReward", "Reroll", "1")
                FireRemote("BlackbeardReward", "Reroll", "2")
            end
        }
    )

    Shop:AddButton(
        {
            Name = "Buy Ghoul Race!",
            Callback = function()
                local args = {
                    [1] = "Ectoplasm",
                    [2] = "BuyCheck",
                    [3] = 4
                }
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
                local args = {
                    [1] = "Ectoplasm",
                    [2] = "Change",
                    [3] = 4
                }
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
            end
        }
    )

    Shop:AddButton(
        {
            Name = "Buy Cyborg Race!",
            Callback = function()
                local args = {
                    [1] = "CyborgTrainer",
                    [2] = "Buy"
                }
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
            end
        }
    )
end

--================================== Script-Menu ==============================
if true then
    Script:AddSection(
        {
            Name = "Main"
        }
    )

    Script:AddSlider(
        {
            Name = "Speed - Super Angel",
            MinValue = 50,
            MaxValue = 250,
            Default = _G.SettingTable.SafeMode_Speed or 90,
            Increase = 1,
            Callback = function(Value)
                _G.SettingTable.SafeMode_Speed = (Value)
            end
        }
    )

    Script:AddSlider(
        {
            Name = "Super Jump - Height ( <font color='rgb(50, 250, 30)'>Recomended</font> )",
            MinValue = 40,
            MaxValue = 300,
            Default = _G.SettingTable.Jump or 60,
            Increase = 2,
            Callback = function(Value)
                _G.SettingTable.Jump = (Value)
                _G.jumpPower = Value
            end
        }
    )

    JumpForceFunction()

    Script:AddToggle(
        {
            Name = "Infinite Jumps",
            Default = _G.SettingTable.Geppo or false,
            Callback = function(Value)
                _G.SettingTable.Geppo = (Value)

                function onJumpRequest()
                    game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid"):ChangeState(
                        "Jumping"
                    )
                end

                if Value then
                    connection = game:GetService("UserInputService").JumpRequest:connect(onJumpRequest)
                end

                if not Value then
                    pcall(
                        function()
                            connection:Disconnect()
                        end
                    )
                end
            end
        }
    )

    Script:AddToggle(
        {
            Name = "Super Speed-Angel <font color='rgb(50, 250, 30)'>( ++ Speed )</font>",
            Description = "Allows you to move in any direction, even in the air.",
            Default = _G.SettingTable.Agility or false,
            Callback = function(Value)
                _G.SettingTable.Agility = (Value)
                if (Value) then
                    -- Loop contínuo para controlar a movimentação do jogador baseado no analógico
                    spawn(
                        function()
                            while _G.SettingTable.Agility do
                                wait()
                                pcall(
                                    function()
                                        local player = game.Players.LocalPlayer
                                        local character = player.Character
                                        if character then
                                            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                                            local humanoid = character:FindFirstChildOfClass("Humanoid")

                                            if humanoidRootPart and humanoid then
                                                local moveDirection = humanoid.MoveDirection

                                                if moveDirection.Magnitude > 0 and not _G.MinkV7 then
                                                    local newVelocity =
                                                        Vector3.new(
                                                        moveDirection.X * _G.SettingTable.SafeMode_Speed,
                                                        humanoidRootPart.Velocity.Y,
                                                        moveDirection.Z * _G.SettingTable.SafeMode_Speed
                                                    )
                                                    humanoidRootPart.Velocity = newVelocity
                                                end
                                            end
                                        end
                                    end
                                )
                            end
                        end
                    )
                end
            end
        }
    )

    Script:AddToggle(
        {
            Name = "Walk On Water",
            Default = _G.SettingTable.WalkWater or false,
            Description = "Prevents the user from touching the water and taking damage!!",
            Callback = function(Value)
                _G.SettingTable.WalkWater = Value
                task.spawn(
                    function()
                        local Map = workspace:WaitForChild("Map", 9e9)

                        while _G.SettingTable.WalkWater do
                            task.wait(0.1)
                            Map:WaitForChild("WaterBase-Plane", 9e9).Size = Vector3.new(1000, 113, 1000)
                        end
                        Map:WaitForChild("WaterBase-Plane", 9e9).Size = Vector3.new(1000, 80, 1000)
                    end
                )
            end
        }
    )

    Script:AddToggle(
        {
            Name = "NoStun ( <font color='rgb(30, 250, 30)'>Recommended</font> )",
            Description = "The User can always move freely, but it can interfere when using combos.",
            Default = _G.SettingTable.Stun or false,
            Callback = function(Value)
                _G.SettingTable.Stun = Value

                spawn(
                    function()
                        while _G.SettingTable.Stun do wait()
                            local player = game.Players.LocalPlayer
                            player.Character.Stun.Value = 0
                            player.Character.Humanoid.Sit = false
                            player.Character.Busy.Value = false
                            IsHundredNoStunVar2 = true

                            local player = game.Players.LocalPlayer
                            local character = player.Character
                            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                            local bodyVelocity = humanoidRootPart:FindFirstChild("BodyVelocity")

                            if bodyVelocity then
                                if
                                    (game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool").Name ==
                                        NameMelee())
                                 then
                                    for i, v in next, game:GetService("Players").LocalPlayer.PlayerGui.Main.Skills[
                                        NameMelee()
                                    ]:GetChildren() do
                                        if v:IsA("Frame") and v.Name == "Z" then
                                            if
                                                (v.Name ~= "Template" and v.Title.TextColor3 == Color3.new(1, 1, 1) and
                                                    v.Cooldown.Size == UDim2.new(1, 0, 1, -1))
                                             then
                                                IsHundredNoStunVar2 = false
                                            end
                                        end
                                    end
                                end

                                if (IsHundredNoStunVar2) then
                                    bodyVelocity.P = 0
                                    bodyVelocity.MaxForce = Vector3.new(0, 0, 0)
                                end
                            end
                        end
                    end
                )
            end
        }
    )

    Script:AddToggle(
        {
            Name = "NoClip!!",
            Default = false,
            Callback = function(Value)
                _G.SettingTable.NoClip = Value
            end
        }
    )

    Script:AddSection(
        {
            Name = "Other"
        }
    )

    Script:AddToggle(
        {
            Name = "ESP Islands <font color='rgb(250, 50, 250)'>( Good Navigation )</font>",
            Description = "Displays all islands present in the game.",
            Default = false,
            Callback = function(Value)
                IslandESP = Value
                while IslandESP do
                    wait()
                    UpdateIslandESP()
                end
            end
        }
    )

    Script:AddToggle(
        {
            Name = "ESP Fruits <font color='rgb(250, 50, 250)'>( Very useful )</font>",
            Default = _G.SettingTable.Fruits or false,
            Callback = function(Value)
                DevilFruitESP = Value
                _G.SettingTable.Fruits = Value
                while DevilFruitESP do
                    wait(0.1)
                    UpdateBfEsp()
                end
            end
        }
    )

    Script:AddToggle(
        {
            Name = "Super LiteMode ( <font color='rgb(50, 250, 60)'>+FPS</font> )",
            Default = _G.SettingTable.FPS or false,
            Callback = function(Value)
                _G.SettingTable.FPS = Value
                if Value then
                    pcall(
                        function()
                            local g = game
                            local w = g.Workspace
                            local l = g.Lighting
                            local t = w.Terrain

                            -- Configurações do terreno e iluminação
                            t.WaterWaveSize = 0
                            t.WaterWaveSpeed = 0
                            t.WaterReflectance = 0
                            t.WaterTransparency = 0
                            l.GlobalShadows = false
                            l.FogEnd = 9e9
                            l.Brightness = 0
                            settings().Rendering.QualityLevel = Enum.QualityLevel.Level01

                            -- Otimizações para performance
                            for _, v in pairs(g:GetDescendants()) do
                                if
                                    v:IsA("Part") or v:IsA("UnionOperation") or v:IsA("CornerWedgePart") or
                                        v:IsA("TrussPart") or
                                        v:IsA("MeshPart")
                                 then
                                    v.Material = Enum.Material.Plastic
                                    v.Reflectance = 0
                                    v.CastShadow = false
                                elseif v:IsA("Decal") or v:IsA("Texture") then
                                    v.Transparency = 0
                                elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
                                    v.Lifetime = NumberRange.new(0, 0)
                                    v.Transparency = NumberSequence.new(0)
                                elseif v:IsA("Explosion") then
                                    v.BlastPressure = 1
                                    v.BlastRadius = 1
                                elseif v:IsA("Fire") or v:IsA("SpotLight") or v:IsA("Smoke") or v:IsA("Sparkles") then
                                    v.Enabled = false
                                end
                            end

                            -- Desativando efeitos visuais no Lighting
                            for _, e in pairs(l:GetChildren()) do
                                if
                                    e:IsA("BlurEffect") or e:IsA("SunRaysEffect") or e:IsA("ColorCorrectionEffect") or
                                        e:IsA("BloomEffect") or
                                        e:IsA("DepthOfFieldEffect")
                                 then
                                    e.Enabled = false
                                end
                            end

                            -- Removendo elementos de água na câmera (se existirem)
                            for _, v in pairs(w.Camera:GetDescendants()) do
                                if v.Name == "Water" then
                                    v.Transparency = 1
                                    v.Material = Enum.Material.Plastic
                                end
                            end

                            -- Removendo partículas e efeitos de ataques (pedaços do chão)
                            for _, obj in pairs(w:GetDescendants()) do
                                if obj:IsA("ParticleEmitter") or obj:IsA("Trail") or obj:IsA("Smoke") or obj:IsA("Fire") then
                                    obj:Destroy()
                                elseif obj:IsA("Explosion") then
                                    obj.BlastPressure = 1
                                    obj.BlastRadius = 1
                                end
                            end
                        end
                    )
                end
            end
        }
    )

    Script:AddToggle(
        {
            Name = "Auto Remove Damage V2!! ( <font color='rgb(60, 250, 60)'>Fixed, Improved</font> )",
            Default = _G.SettingTable.Dam or false,
            Callback = function(Value)
                _G.SettingTable.Dam = Value
                game:GetService("ReplicatedStorage").Assets.GUI.DamageCounter.Enabled = not (Value)
            end
        }
    )

    Script:AddToggle(
        {
            Name = "Auto Remove Fog!",
            Default = _G.SettingTable.Fog or false,
            Callback = function(Value)
                _G.SettingTable.Fog = (Value)

                pcall(
                    function()
                        local lighting = game.Lighting
                        lighting.FogEnd = 100000
                        for _, v in pairs(lighting:GetDescendants()) do
                            if v:IsA("Atmosphere") then
                                v:Destroy()
                            end
                        end
                    end
                )
            end
        }
    )

    Script:AddSection(
        {
            Name = "More"
        }
    )

    Script:AddButton(
        {
            Name = "Join Pirates Team",
            Callback = function()
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("SetTeam", "Pirates")
            end
        }
    )

    Script:AddButton(
        {
            Name = "Join Marine Team",
            Callback = function()
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("SetTeam", "Marines")
            end
        }
    )

    Script:AddButton(
        {
            Name = "Rejoin Server!!",
            Callback = function()
                game:GetService("TeleportService"):TeleportToPlaceInstance(
                    game.PlaceId,
                    game.JobId,
                    game.Players.LocalPlayer
                )
            end
        }
    )
end

--================================== Utilities-Menu ==============================
if true then
    Utilities:AddSection({"Super Button ( Mobile )"})

    function RemoveToggleButton()
        if toggleButton then
            toggleButton:Destroy()
            toggleButton = false
        end
    end

    function AddToggleButton()
        if not toggleButton then
            toggleButton = Instance.new("TextButton")

            toggleButton.Text = "Blox Tools"
            toggleButton.Size = UDim2.new(0, 120, 0, 55) -- Tamanho maior e mais retangular
            toggleButton.Position = UDim2.new(1, -125, 0, 100) -- Posicionamento mais visível no canto superior direito
            toggleButton.AnchorPoint = Vector2.new(1, 0)
            toggleButton.BackgroundTransparency = 0.25 -- Leve transparência para um visual mais moderno
            toggleButton.BackgroundColor3 = Color3.fromRGB(45, 45, 48) -- Cor de fundo mais escura para dar um estilo flat
            toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255) -- Texto branco para contraste
            toggleButton.TextSize = 18 -- Tamanho do texto maior para melhor visibilidade
            toggleButton.Font = Enum.Font.GothamBold -- Fonte Gotham para um ar mais clean e moderno
            toggleButton.BorderSizePixel = 0 -- Sem borda para um visual flat

            local uiCorner = Instance.new("UICorner")
            uiCorner.CornerRadius = UDim.new(0.1, 0) -- Bordas levemente arredondadas
            uiCorner.Parent = toggleButton

            local uiStroke = Instance.new("UIStroke")
            uiStroke.Thickness = 1.5 -- Espessura fina para manter o visual elegante
            uiStroke.Color = Color3.fromRGB(80, 80, 80) -- Borda em tom cinza escuro
            uiStroke.Transparency = 0.35 -- Borda semi-transparente para suavidade
            uiStroke.Parent = toggleButton

            local lastTouchTime = 0
            local touchCount = 0
            local touchDelay = 0.2

            toggleButton.MouseEnter:Connect(
                function()
                    toggleButton:TweenSize(UDim2.new(0, 135, 0, 65), "Out", "Quad", 0.2, true) -- Aumenta ao passar o mouse
                    toggleButton.BackgroundColor3 = Color3.fromRGB(55, 55, 60) -- Leve alteração de cor
                    uiStroke.Color = Color3.fromRGB(120, 120, 120) -- Clareia a borda ao passar o mouse
                end
            )

            toggleButton.MouseLeave:Connect(
                function()
                    toggleButton:TweenSize(UDim2.new(0, 120, 0, 55), "Out", "Quad", 0.2, true) -- Volta ao tamanho normal
                    toggleButton.BackgroundColor3 = Color3.fromRGB(45, 45, 48) -- Cor de fundo original
                    uiStroke.Color = Color3.fromRGB(80, 80, 80) -- Volta à cor original da borda
                end
            )

            toggleButton.MouseButton1Down:Connect(
                function()
                    local currentTime = tick()

                    -- Verifica se o toque ocorreu dentro do tempo de 400ms
                    if currentTime - lastTouchTime <= touchDelay then
                        touchCount = touchCount + 1
                    else
                        touchCount = 1 -- Se o tempo entre toques for maior que 400ms, conta como um novo toque
                    end

                    lastTouchTime = currentTime

                    -- Se for o segundo ou mais toques dentro do tempo de 400ms, chama a função X
                    if touchCount >= 2 then
                        ActionSuperButton(SuperButtonNumberAction2) -- Função X
                        touchCount = 0 -- Reseta a contagem após a execução
                    end
                end
            )

            toggleButton.MouseButton1Up:Connect(
                function()
                    -- Se foi apenas um toque (não teve múltiplos toques dentro de 400ms)
                    if touchCount == 1 then
                        wait(touchDelay) -- Aguarda o tempo de 400ms para garantir que não será considerado como toque múltiplo
                        if touchCount == 1 then
                            ActionSuperButton(SuperButtonNumberAction) -- Função Y
                        end
                    end
                end
            )

            toggleButton.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui"):WaitForChild("ScreenGui")
        end
    end

    function PlayUseSong()
        local sound = Instance.new("Sound")
        sound.SoundId = "rbxassetid://9120139331"
        sound.Parent = game:GetService("SoundService")
        sound.Volume = 4
        sound:Play()
    end

    function ActionSuperButton(t)
        if t == 0 then
            PlayUseSong()
            launchPlayer()
        end

        if t == 1 then
            TPTBP()
        end

        if t == 2 then
            local player = game.Players.LocalPlayer
            local character = player and player.Character
            character.HumanoidRootPart.CFrame = character.HumanoidRootPart.CFrame + Vector3.new(0, 500, 0)
        end

        if t == 3 then
            if (_G.SelectedItemButtom) then
                if containsItem(_G.WeaponList, _G.SelectedItemButtom) then
                    EquipWeapon(_G.SelectedItemButtom)
                    PlayUseSong()
                    NotificationMenuGame("I'm ready!! ( XD )")
                else
                    NotificationMenuGame("???")
                end
            else
                NotificationMenuGame(
                    "First it is necessary to calibrate the item...",
                    "You can do this in the menu where you activated the button."
                )
            end
        end

        if t == 4 then
            MinkV7Toggle:Set((not _G.MinkV7))
        end

        if t == 5 then
            _G.LockPlayer = not _G.LockPlayer

            if not _G.LockPlayer then
                NotificationMenuGame("Unlock Player")
            else
                NotificationMenuGame("LOCKED PLAYER!!!")
            end
        end
    end

    _G.LockPlayer = false
    List = {
        "Super Boost",
        "Where is he? ( Player )",
        "Manual SafeMode",
        "Hold an Item",
        "Change MinkV7",
        "Lock Player"
    }

    A =
        Utilities:AddButton(
        {
            Name = "Select Item. <font color='rgb(250, 250, 50)'>( Nothing )</font>",
            Callback = function()
                tool = tostring(game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool").Name)
                _G.SelectedItemButtom = tool
                _G.SettingTable.A = tostring(game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool").Name)
                A:Set("Select Item. <font color='rgb(60, 250, 60)'>( " .. _G.SelectedItemButtom .. " )</font>")
                NotificationMenuGame((tool))
            end
        }
    )

    if (_G.SettingTable.A) then
        _G.SelectedItemButtom = _G.SettingTable.A
        A:Set("Select Item. <font color='rgb(60, 250, 60)'>( " .. _G.SelectedItemButtom .. " )</font>")
    end

    Utilities:AddToggle(
        {
            Name = "Insert Button <font color='rgb(50, 250, 0)'>( GUI )</font>",
            Description = "A button is added to perform some action! with one click!",
            Default = _G.SettingTable.InsertButtom or false,
            Callback = function(Value)
                _G.SettingTable.InsertButtom = Value
                pcall(
                    function()
                        if Value then
                            AddToggleButton()
                        else
                            RemoveToggleButton()
                        end
                    end
                )
            end
        }
    )

    Utilities:AddDropdown(
        {
            Name = "Primary Execution <font color='rgb(250, 30, 250)'>( 1 Click )</font>",
            Options = List,
            Default = _G.SettingTable.PrimaryExecution or {"Suprise"},
            MultSelect = false,
            Callback = function(Value)
                _G.SettingTable.PrimaryExecution = Value
                L = List
                SuperButtonNumberAction = findIndex(Value, L) - 1
            end
        }
    )

    Utilities:AddDropdown(
        {
            Name = "Secondary Execution <font color='rgb(250, 30, 250)'>( 2 Click )</font>",
            Options = List,
            Default = _G.SettingTable.SecondaryExecution or {"Suprise"},
            MultSelect = false,
            Callback = function(Value)
                _G.SettingTable.SecondaryExecution = Value
                L = List
                SuperButtonNumberAction2 = findIndex(Value, L) - 1
            end
        }
    )


    Utilities:AddSection(
            {
                Name = "Utilities"
            }
        )

        Utilities:AddButton(
            {
                Name = "Invisible!",
                Description = "( ALLOWS YOU TO BECOME <font color='rgb(50, 250, 30)'>INVISIBLE</font> WHILE IT IS NOT <font color='rgb(250, 50, 30)'>IN YOUR HANDS.</font> )",
                Callback = function()
                    game:GetService("Players").LocalPlayer.Character.LowerTorso:Destroy()
                end
            }
        )

        Utilities:AddToggle(
            {
                Name = "Auto Haki!",
                Description = "Activate Haki automatically when deactivated.",
                Default = _G.SettingTable.Haki or true,
                Callback = function(Value)
                    _G.SettingTable.Haki = (Value)
                    if Value then
                        AutoSuperHaki()
                    end
                end
            }
        )

        Utilities:AddToggle(
            {
                Name = "Auto AwekiningV4! ( <font color='rgb(50, 250, 60)'>NEW</font> )",
                Default = _G.SettingTable.AwekiningV4 or false,
                Callback = function(Value)
                    _G.SettingTable.AwekiningV4 = Value

                    if Value then
                        while _G.SettingTable.AwekiningV4 do
                            wait(0.1)
                            local player = game.Players.LocalPlayer
                            local character = player.Character
                            if character.RaceEnergy.Value >= 1 and not character.RaceTransformed.Value then
                                local virtualInput = game:GetService("VirtualInputManager")
                                virtualInput:SendKeyEvent(true, "Y", false, game)
                                virtualInput:SendKeyEvent(false, "Y", false, game)
                            end
                        end
                    end
                end
            }
        )

        function JumpForceFunction(J)
            _G.jumpPower = _G.SettingTable.Jump or 50

            -- Função para forçar o JumpPower do LocalPlayer
            local function forceJumpPower(humanoid)
                humanoid.JumpPower = _G.jumpPower
                humanoid:GetPropertyChangedSignal("JumpPower"):Connect(
                    function()
                        if humanoid.JumpPower ~= _G.jumpPower then
                            humanoid.JumpPower = _G.jumpPower
                        end
                    end
                )
            end

            -- Referência ao jogador local
            local player = game.Players.LocalPlayer

            -- Conectar a função quando o personagem do jogador local for adicionado
            player.CharacterAdded:Connect(
                function(character)
                    local humanoid = character:WaitForChild("Humanoid")
                    forceJumpPower(humanoid)
                end
            )

            -- Caso o personagem do jogador local já esteja carregado
            if player.Character then
                local humanoid = player.Character:FindFirstChild("Humanoid")
                if humanoid then
                    forceJumpPower(humanoid)
                end
            end

            -- Função para atualizar o JumpPower do LocalPlayer
            local function updateJumpPower()
                if player.Character then
                    local humanoid = player.Character:FindFirstChild("Humanoid")
                    if humanoid then
                        humanoid.JumpPower = _G.jumpPower
                    end
                end
            end

            -- Atualizar o JumpPower do LocalPlayer constantemente
            game:GetService("RunService").Stepped:Connect(
                function()
                    updateJumpPower()
                end
            )
        end

        Utilities:AddSlider(
            {
                Name = "Super Jump - Height ( <font color='rgb(50, 250, 30)'>Recomended</font> )",
                MinValue = 40,
                MaxValue = 250,
                Default = _G.SettingTable.Jump or 60,
                Increase = 2,
                Callback = function(Value)
                    _G.SettingTable.Jump = (Value)
                    _G.jumpPower = Value
                end
            }
        )

       

        JumpForceFunction()

      

        function MinkV7Function()
            spawn(
                function()
                    while _G.MinkV7 do
                        wait()
                        local player = game.Players.LocalPlayer
                        local character = player.Character
                        if character then
                            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                            local humanoid = character:FindFirstChildOfClass("Humanoid")

                            if humanoidRootPart and humanoid then
                                -- Obtém a direção de movimento desejada pelo jogador
                                local moveDirection = humanoid.MoveDirection

                                if moveDirection.Magnitude > 0 then
                                    -- Aplica uma pequena velocidade na direção de movimento, preservando a velocidade no eixo Y
                                    local newVelocity =
                                        Vector3.new(
                                        moveDirection.X * 300,
                                        humanoidRootPart.Velocity.Y,
                                        moveDirection.Z * 300
                                    )
                                    humanoidRootPart.Velocity = newVelocity
                                end
                            end
                        end
                    end
                end
            )
        end

        MinkV7Toggle =
            Utilities:AddToggle(
            {
                Name = "<font color='rgb(50, 250, 30)'>Mink V7!</font>",
                Description = "That's really, really fast...",
                Default = false,
                Callback = function(Value)
                    _G.MinkV7 = Value
                    if Value then
                        MinkV7Function()
                    end
                end
            }
        )

        

        Utilities:AddToggle(
            {
                Name = "Super LiteMode ( <font color='rgb(50, 250, 60)'>+FPS</font> )",
                Default = _G.SettingTable.FPS or false,
                Callback = function(Value)
                    _G.SettingTable.FPS = Value
                    if Value then
                        pcall(
                            function()
                                local g = game
                                local w = g.Workspace
                                local l = g.Lighting
                                local t = w.Terrain

                                -- Configurações do terreno e iluminação
                                t.WaterWaveSize = 0
                                t.WaterWaveSpeed = 0
                                t.WaterReflectance = 0
                                t.WaterTransparency = 0
                                l.GlobalShadows = false
                                l.FogEnd = 9e9
                                l.Brightness = 0
                                settings().Rendering.QualityLevel = Enum.QualityLevel.Level01

                                -- Otimizações para performance
                                for _, v in pairs(g:GetDescendants()) do
                                    if
                                        v:IsA("Part") or v:IsA("UnionOperation") or v:IsA("CornerWedgePart") or
                                            v:IsA("TrussPart") or
                                            v:IsA("MeshPart")
                                     then
                                        v.Material = Enum.Material.Plastic
                                        v.Reflectance = 0
                                        v.CastShadow = false
                                    elseif v:IsA("Decal") or v:IsA("Texture") then
                                        v.Transparency = 0
                                    elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
                                        v.Lifetime = NumberRange.new(0, 0)
                                        v.Transparency = NumberSequence.new(0)
                                    elseif v:IsA("Explosion") then
                                        v.BlastPressure = 1
                                        v.BlastRadius = 1
                                    elseif v:IsA("Fire") or v:IsA("SpotLight") or v:IsA("Smoke") or v:IsA("Sparkles") then
                                        v.Enabled = false
                                    end
                                end

                                -- Desativando efeitos visuais no Lighting
                                for _, e in pairs(l:GetChildren()) do
                                    if
                                        e:IsA("BlurEffect") or e:IsA("SunRaysEffect") or e:IsA("ColorCorrectionEffect") or
                                            e:IsA("BloomEffect") or
                                            e:IsA("DepthOfFieldEffect")
                                     then
                                        e.Enabled = false
                                    end
                                end

                                -- Removendo elementos de água na câmera (se existirem)
                                for _, v in pairs(w.Camera:GetDescendants()) do
                                    if v.Name == "Water" then
                                        v.Transparency = 1
                                        v.Material = Enum.Material.Plastic
                                    end
                                end

                                -- Removendo partículas e efeitos de ataques (pedaços do chão)
                                for _, obj in pairs(w:GetDescendants()) do
                                    if
                                        obj:IsA("ParticleEmitter") or obj:IsA("Trail") or obj:IsA("Smoke") or
                                            obj:IsA("Fire")
                                     then
                                        obj:Destroy()
                                    elseif obj:IsA("Explosion") then
                                        obj.BlastPressure = 1
                                        obj.BlastRadius = 1
                                    end
                                end
                            end
                        )
                    end
                end
            }
        )

        Utilities:AddToggle(
            {
                Name = "Auto Remove Damage V2!! ( <font color='rgb(60, 250, 60)'>Fixed, Improved</font> )",
                Default = _G.SettingTable.Dam or false,
                Callback = function(Value)
                    _G.SettingTable.Dam = Value
                    ReplicatedStorage = game:GetService("ReplicatedStorage")
                    ReplicatedStorage.Assets.GUI.DamageCounter.Enabled = not (Value)
                end
            }
        )

        Utilities:AddToggle(
            {
                Name = "Auto Remove Fog!",
                Default = _G.SettingTable.Fog or false,
                Callback = function(Value)
                    _G.SettingTable.Fog = (Value)

                    pcall(
                        function()
                            local lighting = game.Lighting
                            lighting.FogEnd = 100000
                            for _, v in pairs(lighting:GetDescendants()) do
                                if v:IsA("Atmosphere") then
                                    v:Destroy()
                                end
                            end
                        end
                    )
                end
            }
        )


        Utilities:AddToggle(
            {
                Name = "Super Graphics <font color='rgb(250, 50, 60)'>( Not Recommended... )</font>",
                Default = _G.SettingTable.FPS3 or false,
                Callback = function(Value)
                    _G.SettingTable.FPS2 = Value
                    if Value then
                        local Lighting = game:GetService("Lighting")
                        local player = game.Players.LocalPlayer
                        local camera = game.Workspace.CurrentCamera

                        -- Ajustes Iniciais de Iluminação
                        Lighting.Brightness = 1.6
                        Lighting.GlobalShadows = true
                        Lighting.EnvironmentDiffuseScale = 1
                        Lighting.EnvironmentSpecularScale = 0.7
                        Lighting.ClockTime = 14 -- Horário inicial

                        -- Correção de Cor para Mudança de Hora
                        local colorCorrection = Instance.new("ColorCorrectionEffect")
                        colorCorrection.Parent = Lighting

                        -- Configurações para Raios Solares
                        local sunRays = Instance.new("SunRaysEffect")
                        sunRays.Intensity = 1
                        sunRays.Spread = 1
                        sunRays.Parent = Lighting

                        -- Brilho suave para destaques
                        local bloom = Instance.new("BloomEffect")
                        bloom.Intensity = 0.15
                        bloom.Size = 20
                        bloom.Threshold = 1
                        bloom.Parent = Lighting

                        -- Alteração gradual da cor ao longo do dia
                        local function updateLightingColor(hour)
                            if hour >= 6 and hour < 12 then
                                -- Manhã: tons mais frios
                                colorCorrection.TintColor = colorCorrection.TintColor:lerp(Color3.fromRGB(245, 245, 255), 0.02)
                                sunRays.Intensity = 0.1
                                Lighting.Brightness = 1.6
                            elseif hour >= 12 and hour < 17 then
                                -- Meio-dia: luz neutra
                                colorCorrection.TintColor = colorCorrection.TintColor:lerp(Color3.fromRGB(255, 250, 240), 0.02)
                                sunRays.Intensity = 0.1
                                Lighting.Brightness = 1.8
                            elseif hour >= 17 and hour < 18 then
                                -- Entardecer: tons alaranjados
                                colorCorrection.TintColor = colorCorrection.TintColor:lerp(Color3.fromRGB(255, 210, 160), 0.02)
                                sunRays.Intensity = 0.05
                                Lighting.Brightness = 1.4
                            else
                                -- Noite: tom azulado e luz suave
                                colorCorrection.TintColor = colorCorrection.TintColor:lerp(Color3.fromRGB(180, 200, 255), 0.02)
                                sunRays.Intensity = 0.03
                                Lighting.Brightness = 1.2
                            end
                        end

                        -- Atualização de Iluminação e Hora com Transições Suaves
                        game:GetService("RunService").RenderStepped:Connect(function()
                            local hour = Lighting.ClockTime
                            updateLightingColor(hour)
                        end)

                        -- Função para aplicar reflexo realista à água
                        local function applyWaterEffects()
                            for _, waterPart in pairs(game.Workspace:GetDescendants()) do
                                if waterPart:IsA("BasePart") and waterPart.Material == Enum.Material.Water then
                                    waterPart.Reflectance = 0.8
                                    waterPart.Transparency = 0.1
                                end
                            end
                        end

                        applyWaterEffects()

                        -- Borrão de Movimento Dinâmico para Todos os Movimentos, incluindo a Câmera
                        local motionBlur = Instance.new("BlurEffect")
                        motionBlur.Size = 0
                        motionBlur.Parent = Lighting

                        local lastCameraPosition = camera.CFrame.Position
                        game:GetService("RunService").RenderStepped:Connect(function()
                            local speed = (player.Character and player.Character.HumanoidRootPart.Velocity.Magnitude) or 0
                            local cameraSpeed = (camera.CFrame.Position - lastCameraPosition).Magnitude

                            -- Aplicando o efeito de blur baseado em movimento do jogador e da câmera
                            local blurAmount = math.clamp(((speed / 2 ) + (cameraSpeed * 2)) / 30, 0, 10)
                            motionBlur.Size = blurAmount

                            lastCameraPosition = camera.CFrame.Position
                        end)


                        local g = game

                        for _, v in pairs(g:GetDescendants()) do

                            if v:IsA("ParticleEmitter") or v:IsA("Trail") then
                                v.Lifetime = NumberRange.new(2.5, 2.5)

                            end
                        end


                    end
                end
            }
        )
end

--================================== Extra-Menu ==============================
if true then

    VV1 = Extra:AddToggle(
            {
                Name = "Teleport for players. <font color='rgb(50, 250, 50)'>( Recommended )</font>",
                Description = "Teleports the player <font color='rgb(30, 250, 0)'>exactly</font> where the other is.",
                Default = _G.SettingTable.TPV1 or false,
                Callback = function(Value)
                    _G.SettingTable.TPV1 = Value
                    if _G.SettingTable.TPV2 then
                        pcall(function()
                            VV2:Set(false)
                        end)
                    end
                    _G.V1 = (Value)
                    if Value then
                        _G.OJO_VS["V1"] = true
                    else
                        _G.OJO_VS["V1"] = nil
                    end

                    if Value and not _G.VPO then
                        OJO()
                    end
                end
            }
        )

    VV2 = Extra:AddToggle(
            {
                Name = "V2 in all teleports <font color='rgb(50, 250, 250)'>( NEW )</font>",
                Default = _G.SettingTable.TPV2 or false,
                Description = "<font color='rgb(250, 250, 0)'>Makes small edits</font> to the <font color='rgb(30, 250, 0)'>teleport tools</font>, which make some <font color='rgb(250, 30, 0)'>difference</font>.",
                Callback = function(Value)
                    _G.SettingTable.TPV2 = Value
                    if _G.SettingTable.TPV2 then
                        pcall(function()
                            VV1:Set(false)
                        end)
                    end

                    _G.V2 = (Value)
                    if Value then
                        _G.OJO_VS["V2"] = true
                    else
                        _G.OJO_VS["V2"] = nil
                    end


                    if Value then
                        _G.OJO_SV["V2"] = true
                    else
                        _G.OJO_SV["V2"] = nil
                    end

                    if Value and not _G.VPO then
                        OJO()
                    end

                    if Value and not _G.IsScriptRunning then
                        SuperView()
                    end

                    while _G.SettingTable.TPV2 do
                        wait(0.1)

                        if (_G.SPLY) and (_G.SPLY.Character) and (_G.SPLY.Character:FindFirstChild("Humanoid")) then
                            _G.SelectedPlayer = _G.SPLY
                            ChangeTargetPlayer(_G.SPLY.Name)
                        else
                            _G.SelectedPlayer = game.Players.LocalPlayer
                        end
                    end
                end
            }
        )

    
        Extra:AddSection(
            {
                Name = "Teleport Toll"
            }
        )


        Extra:AddToggle(
            {
                Name = "Auto Teleport Tool! <font color='rgb(50, 250, 30)'>( Hard )</font>",
                Default = false,
                Callback = function(Value)
                    if not Value then
                        _G.TPTOLL:Destroy()
                        return
                    end

                    local plr = game:GetService("Players").LocalPlayer
                    local mouse = plr:GetMouse()
                    local tool = Instance.new("Tool")
                    tool.RequiresHandle = false
                    tool.Name = "Teleport"
                    tool.Activated:Connect(
                        function()
                            local root = plr.Character.HumanoidRootPart
                            local pos = mouse.Hit.Position + Vector3.new(0, 2.5, 0)
                            local offset = pos - root.Position
                            root.CFrame = root.CFrame + offset
                        end
                    )
                    tool.Parent = plr.Backpack
                    _G.TPTOLL = toll
                end
            }
        )

            Extra:AddToggle(
            {
                Name = "Auto Teleport Tool V2! <font color='rgb(250, 50, 50)'>( Medium )</font>",
                Default = false,
                Callback = function(Value)
                    if not Value then
                        return
                    end

                    local Players = game:GetService("Players")
                    local LocalPlayer = Players.LocalPlayer
                    local Mouse = LocalPlayer:GetMouse()
                    local UserInputService = game:GetService("UserInputService")

                    local ItemUsed = false
                    local IsDragging = false
                    local TeleportTool = Instance.new("Tool")

                    TeleportTool.RequiresHandle = false
                    TeleportTool.Name = "Teleport V2"

                    local function teleport()
                        local Character = LocalPlayer.Character
                        if Character then
                            local HumanoidRootPart = Character:FindFirstChild("HumanoidRootPart")
                            if HumanoidRootPart then
                                local Hit = Mouse.Hit
                                local NewPosition = Hit.Position + Vector3.new(0, 2.5, 0)
                                local Offset = NewPosition - HumanoidRootPart.Position
                                HumanoidRootPart.CFrame = HumanoidRootPart.CFrame + Offset
                            end
                        end
                    end

                    TeleportTool.Activated:Connect(
                        function()
                            ItemUsed = true
                            _G.OrionLib:MakeNotification(
                                {
                                    Name = "Teleport V2 Ready!!",
                                    Content = "The item has been used, click on the teleport location!",
                                    Image = "rbxassetid://4483345998",
                                    Time = 3
                                }
                            )
                        end
                    )

                    UserInputService.InputBegan:Connect(
                        function(input, gameProcessed)
                            if not gameProcessed then
                                if input.UserInputType == Enum.UserInputType.Touch then
                                    IsDragging = false
                                elseif input.UserInputType == Enum.UserInputType.MouseButton1 then
                                    IsDragging = false
                                end
                            end
                        end
                    )

                    UserInputService.InputChanged:Connect(
                        function(input, gameProcessed)
                            if not gameProcessed then
                                if input.UserInputType == Enum.UserInputType.Touch then
                                    IsDragging = true
                                elseif input.UserInputType == Enum.UserInputType.MouseMovement then
                                    IsDragging = true
                                end
                            end
                        end
                    )

                    UserInputService.InputEnded:Connect(
                        function(input, gameProcessed)
                            if not gameProcessed then
                                if
                                    (input.UserInputType == Enum.UserInputType.Touch) or
                                        (input.UserInputType == Enum.UserInputType.MouseButton1)
                                 then
                                    if not IsDragging and ItemUsed then
                                        -- Executar código de teletransporte
                                        teleport()
                                        -- Resetar a variável após o uso
                                        ItemUsed = false
                                    end
                                end
                            end
                        end
                    )

                    TeleportTool.Parent = LocalPlayer.Backpack
                end
            }
        )

        Extra:AddSection(
            {
                Name = "Teleport With Action"
            }
        )

        Extra:AddSection(
            {
                Name = "Teleport With Action + Player"
            }
        )

        Extra:AddToggle(
            {
                Name = "Teleport With X:Dragon Trident + Player! <font color='rgb(50, 250, 30)'>( Super EZ )</font>",
                Default = _G.SettingTable.TP_DT_Player or false,
                Callback = function(Value)
                    _G.SettingTable.TP_DT_Player = Value
                    if not Value then
                        removeItemFromInventory("DragonTrident")
                        return
                    end
                    if Value then
                        addTeleportTool("DragonTrident")
                    end
                end
            }
        )




        Extra:AddToggle(
            {
                Name = "Teleport With X:Skull Guitar + Player! <font color='rgb(50, 250, 30)'>( Super EZ )</font>",
                Default = _G.SettingTable.TP_SG_Player or false,
                Callback = function(Value)
                    _G.SettingTable.TP_SG_Player = Value
                    if not Value then
                        removeItemFromInventory("SoulGuitar")
                        return
                    end
                    addTeleportTool("SoulGuitar")
                end
            }
        )

        Extra:AddToggle(
            {
                Name = "Teleport With V:Ice + Player! <font color='rgb(50, 250, 30)'>( Super EZ )</font>",
                Default = _G.SettingTable.TP_VI_Player or false,
                Callback = function(Value)
                    _G.SettingTable.TP_VI_Player = Value
                    if not Value then
                        removeItemFromInventory("ICE")
                        return
                    end
                    addTeleportTool("ICE")
                end
            }
        )

        Extra:AddToggle(
            {
                Name = "Teleport With Z:CDK + Player! <font color='rgb(50, 250, 30)'>( Super EZ )</font>",
                Default = _G.SettingTable.TP_ZCDK_Player or false,
                Callback = function(Value)
                    _G.SettingTable.TP_ZCDK_Player = Value
                    if not Value then
                        removeItemFromInventory("Z_CDK")
                        return
                    end
                    addTeleportTool("Z_CDK")
                end
            }
        )

        Extra:AddToggle(
            {
                Name = "Teleport With V:Dough + Player! <font color='rgb(50, 250, 30)'>( Super EZ )</font>",
                Default = _G.SettingTable.TP_VD_Player or false,
                Callback = function(Value)
                    _G.SettingTable.TP_VD_Player = Value
                    if not Value then
                        removeItemFromInventory("V_DOUGH")
                        return
                    end
                    addTeleportTool("V_DOUGH")
                end
            }
        )

        Extra:AddSection(
            {
                Name = "Teleport With Action + Player ( Super )"
            }
        )

        Extra:AddToggle(
            {
                Name = "Teleport <font color='rgb(250, 30, 250)'>DragonGuitar</font>! <font color='rgb(50, 250, 30)'>( It's a combo?? )</font>",
                Default = _G.SettingTable.TP_VI_XS_Player or false,
                Callback = function(Value)
                    _G.SettingTable.TP_VI_XS_Player = Value
                    if not Value then
                        removeItemFromInventory("DragonGuitar")
                        return
                    end
                    addTeleportTool("DragonGuitar")
                end
            }
        )

end

--================================== Other System ==============================
if true then
    local oldhook
    oldhook =
        hookmetamethod(
        game,
        "__namecall",
        function(self, ...)
            if self.Name == "RemoteEvent" and getnamecallmethod():lower() == "fireserver" then
                local args = {...}
                local Vector = args[1]
                if typeof(Vector) == "Vector3" then
                    if _G.AimbotPos then
                        return oldhook(self, _G.AimbotPos, ...)
                    elseif _G.SP and _G.SP.Character and _G.SP.Character.HumanoidRootPart then
                        return oldhook(self, _G.SP.Character.HumanoidRootPart.Position, ...)
                    elseif _G.SelectedBall and _G.SettingTable.AimbotV2 then
                        return oldhook(self, _G.SelectedBall.Position, ...)
                    end
                end
            end
            return oldhook(self, ...)
        end
    )

    function UpdateWaponList()
        while true do
            WeaponList_0 = {}
            for i, v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetChildren()) do
                if v:IsA("Tool") then
                    table.insert(WeaponList_0, v.Name)
                end
            end
            for i, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
                if v:IsA("Tool") then
                    table.insert(WeaponList_0, v.Name)
                end
            end
            _G.WeaponList = WeaponList_0
            wait(1)
        end
    end

    spawn(UpdateWaponList)

   
end
