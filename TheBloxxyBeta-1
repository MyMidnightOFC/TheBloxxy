local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
_G.OrionLib = OrionLib


local success, err = pcall(function()






-- =========================== General System ===========================
if 1 then

    function N(A, B)
        B = B or 15
        OrionLib:MakeNotification({
            Name = "A: ",
            Content = tostring(A),
            Image = "rbxassetid://4483345998",
            Time = B
        })
    end

    function VT(tabela)
        local httpService = game:GetService("HttpService")
        local jsonStr = httpService:JSONEncode(tabela)
        return jsonStr
    end

    function CheckSafeZone(p)
        -- Verifica se 'p' possui 'HumanoidRootPart' e 'Humanoid' para evitar erros
        if not p:FindFirstChild("HumanoidRootPart") or not p:FindFirstChild("Humanoid") then
            return false
        end
    
        for i, v in pairs(game:GetService("Workspace")["_WorldOrigin"].SafeZones:GetChildren()) do
            if v:IsA("Part") then
                local distance = (v.Position - p.HumanoidRootPart.Position).magnitude
                local healthPercentage = p.Humanoid.Health / p.Humanoid.MaxHealth
                if distance <= 200 and healthPercentage >= 0.95 then
                    return true
                end
            end
        end
        return false
    end

    local function F_Number(numero)
        -- Define a lista de sufixos e seus valores, incluindo bilhões
        local sufixos = {
            {valor = 1e9, sufixo = "B"},
            {valor = 1e6, sufixo = "M"},
            {valor = 1e3, sufixo = "K"}
        }
    
        -- Verifica o sufixo apropriado para o número
        for _, sufixoInfo in ipairs(sufixos) do
            if numero >= sufixoInfo.valor then
                -- Calcula o valor formatado com precisão de duas casas decimais
                local valorFormatado = numero / sufixoInfo.valor
                if valorFormatado >= 100 then
                    return string.format("%.0f%s", valorFormatado, sufixoInfo.sufixo) -- Sem casas decimais para valores grandes
                elseif valorFormatado >= 10 then
                    return string.format("%.1f%s", valorFormatado, sufixoInfo.sufixo) -- Uma casa decimal para valores médios
                else
                    return string.format("%.2f%s", valorFormatado, sufixoInfo.sufixo) -- Duas casas decimais para valores pequenos
                end
            end
        end
    
        -- Caso não se aplique nenhum sufixo, retorna o número original
        return tostring(numero)
    end

    -- Função para arredondar números
local function round(num)
    return math.floor(tonumber(num) + 0.5)
end

-- Variável global para número único (evita conflito de nomes)
local Number = math.random(1, 1000000)

-- Função principal para atualizar o ESP dos jogadores
function UpdateEspPlayer()
    ESPPlayerViewDistance = ESPPlayerViewDistance or 10000
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            pcall(function()
                local character = player.Character
                if character and character:FindFirstChild("Head") then

                    local head = character.Head
                    local existingEsp = head:FindFirstChild("NameEsp" .. Number)

                    if _G.SettingTable.Esp_Player then
                        local distance = round((LocalPlayer.Character.Head.Position - head.Position).Magnitude / 3)

                        -- Verifica distância de visualização
                        if (distance - ESPPlayerViewDistance) < 0 or ESPPlayerViewDistance == 0 then
                            if not existingEsp then
                                -- Cria o BillboardGui para o ESP
                                local bill = Instance.new("BillboardGui")
                                bill.Name = "NameEsp" .. Number
                                bill.ExtentsOffset = Vector3.new(-1, _G.SettingTable2.Esp_Player_HeightText or 3, 0)
                                bill.Size = UDim2.new(1, 210, 1, 90)
                                bill.Adornee = head
                                bill.AlwaysOnTop = true
                                bill.Parent = head

                                -- Cria o TextLabel dentro do BillboardGui
                                local name = Instance.new("TextLabel")
                                name.Font = Enum.Font.GothamBold
                                name.TextWrapped = true
                                name.Size = UDim2.new(1, 0, 1, 0)
                                name.TextYAlignment = Enum.TextYAlignment.Top
                                name.BackgroundTransparency = 1
                                name.TextStrokeTransparency = 0.5
                                name.Parent = bill
                                name.TextSize = _G.SettingTable2.Esp_Player_SizeText or 12.5

                                -- Define a cor do texto baseado na equipe
                                if player.Team == LocalPlayer.Team then
                                    name.TextColor3 = Color3.new(0, 1, 0) -- Verde
                                else
                                    name.TextColor3 = Color3.new(1, 0, 0) -- Vermelho
                                end
                            end

                            -- Atualiza informações no ESP
                            local bount = F_Number(player.leaderstats["Bounty/Honor"].Value)
                            local level = round(player.Data.Level.Value)
                            local levelText = level == 2550 and tostring(level) .. " (MAX)" or tostring(level)
                            local healthPercent = round((character.Humanoid.Health / character.Humanoid.MaxHealth) * 100)
                            local extraInfo = (_G.ESPPlayerViewExtra or true) and "[ " .. bount .. " ]" or ""

                            if CheckSafeZone(character) then
                                extraInfo = extraInfo .. " - SAFE\n"
                            else
                                extraInfo = extraInfo .. "\n"
                            end

                            head["NameEsp" .. Number].TextLabel.Text =
                                extraInfo .. player.Name .. " | " .. distance .. " M\n" ..
                                "Health: " .. healthPercent .. "% Lv. " .. levelText
                        else
                            if existingEsp then
                                existingEsp:Destroy()
                            end
                        end
                    else
                        if existingEsp then
                            existingEsp:Destroy()
                        end
                    end
                end
            end)
        end
    end
end



end

-- =========================== Save System ===========================
if 1 then
    function ReloadPlayersList()
        Playerslist = {}
        table.insert(Playerslist, "Nothing")
        for i, v in pairs(game:GetService("Players"):GetChildren()) do
            table.insert(Playerslist, v.Name)
        end

        DropdownPlayers:Set(Playerslist, true)
    end
end


-- =========================== Save System ===========================
if 1 then
    -- Global configuration
    local HttpService = game:GetService("HttpService")
    local SaveFolder = "MidnigthPvP Saves"
    local DefaultSaveName = "DefaultSettings"

    _G.SettingTable = _G.SettingTable or {A = 1} -- Initializes the global settings table
    _G.SettingTable2 = _G.SettingTable2 or {UISize = {550, 380}, Esp_Player_SizeText = 12.5, Esp_Player_HeightText = 3, UIScale = 435, BorderColorDefault = 0} -- Initializes the global settings table

    -- Utility functions for JSON
    local function JsonEncode(data)
        return HttpService:JSONEncode(data)
    end

    local function JsonDecode(data)
        return HttpService:JSONDecode(data)
    end

    local function IsValidJSON(jsonString)
        local success =
            pcall(
            function()
                JsonDecode(jsonString)
            end
        )
        return success
    end

    -- File management functions
    local function EnsureSaveFolderExists()
        if not isfolder(SaveFolder) then
            makefolder(SaveFolder)
        end
    end

    local function GetFilePath(name)
        return SaveFolder .. "/" .. name .. ".json"
    end

    local function CheckSetting(name)
        EnsureSaveFolderExists()
        local filePath = GetFilePath(name)
        if not isfile(filePath) then
            writefile(filePath, JsonEncode(_G.SettingTable))
            print("[Save System] Saves Configuration file created:", filePath)
        end
    end

    local function CheckSettingTwo(name)
        EnsureSaveFolderExists()
        local filePath = GetFilePath(name)
        if not isfile(filePath) then
            writefile(filePath, JsonEncode(_G.SettingTable2))
            print("[Save System] Configuration file created:", filePath)
        end
    end

    local function ReloadSetting(name)
        EnsureSaveFolderExists()
        local filePath = GetFilePath(name)
        if isfile(filePath) and IsValidJSON(readfile(filePath)) then
            _G.SettingTable = JsonDecode(readfile(filePath))
            print("[Save System] Settings successfully reloaded:", name)
        else
            print("[Save System] Invalid or missing settings file. Creating a new one:", name)
            CheckSetting(name)
        end
    end

    local function ReloadSettingTwo(name)
        EnsureSaveFolderExists()
        local filePath = GetFilePath(name)
        if isfile(filePath) and IsValidJSON(readfile(filePath)) then
            _G.SettingTable2 = JsonDecode(readfile(filePath))
            print("[Save System] Settings successfully reloaded:", name)
        else
            print("[Save System] Invalid or missing settings file. Creating a new one:", name)
            CheckSettingTwo(name)
        end
    end

    local function UpdateSetting(name)
        EnsureSaveFolderExists()
        local filePath = GetFilePath(name)
        writefile(filePath, JsonEncode(_G.SettingTable))
        print("[Save System] Settings updated:", name)
    end

    -- Automatic settings initialization
    CheckSetting(DefaultSaveName)
    CheckSettingTwo("BloxxyUIConfig")
    ReloadSetting(DefaultSaveName)
    ReloadSettingTwo("BloxxyUIConfig")

    if not IsValidJSON(_G.SettingTable2) then
        _G.SettingTable2 = {UISize = {550, 380}, UIScale = 435, IconSize = 40, IconPosition = 0.122, BorderColorDefault = 0, StartMessage = false, BlooxyADM = false}
    end
    -- Periodic auto-save
    spawn(
        function()
            while true do
                wait(1) -- Automatically saves every second
                UpdateSetting(DefaultSaveName)
            end
        end
    )

    print("[Save System] Save system initialized successfully!")
end

-- ===================================== MenuSystem =====================

if 1 then
   local redzlib =
        loadstring(game:HttpGet("https://raw.githubusercontent.com/MyMidnightOFC/TheBloxxy/refs/heads/main/REDzHubV4"))(

    )
       

    local Window =
        redzlib:MakeWindow(
        {
            Title = "MyMidnight Team",
            SubTitle = "BloxFruits Super Script!",
            SaveFolder = "Nothing.lua"
        }
    )

    Window:AddMinimizeButton(
        {
            Button = {
                Image = "rbxassetid://15298567397"
            }
        }
    )

    if (_G.SettingTable.AutoMinimize) then
        Window:Minimize()
    end

    Players = Window:MakeTab({"Players", "swords"})
    Secure = Window:MakeTab({"Security", "lock"})
    Teleport = Window:MakeTab({"Teleport", "locate-fixed"})
    Shop = Window:MakeTab({"SuperShop", "shopping-cart"})
    Utilities = Window:MakeTab({"Utilities", "wrench"})
    Script = Window:MakeTab({"Script", "hammer"})
    Save = Window:MakeTab({"Savedata", "database"})
    ExtraTab = Window:MakeTab({"Plus / Extra", "plus-circle"})
    Play = Window:MakeTab({"PlayMusic", "play-circle"})
end

-- ===================================== Players-Menu =====================

if 1 then
    Players:AddSection({"Visual - Players"})

    Players:AddToggle(
        {
            Name = "ESP Players <font color='rgb(250, 50, 250)'>( Visual Pollution )</font>",
            Description = "See the position of the players.",
            Default = _G.SettingTable.Esp_Player or false,
            Callback = function(Value)
                

                _G.SettingTable.Esp_Player = Value

                while _G.SettingTable.Esp_Player do
                    wait(0.1)
                    UpdateEspPlayer()
                end
            end
        }
    )

    Players:AddToggle(
        {
            Name = "Observation V1 <font color='rgb(50, 250, 50)'>( Recommended )</font>",
            Description = "See the position of the players.",
            Default = false,
            Callback = function(Value)
            end
        }
    )

    Players:AddToggle(
        {
            Name = "Observation V2 <font color='rgb(230, 230, 50)'>( It depends on the graphics. )</font>",
            Default = false,
            Callback = function(Value)
            end
        }
    )

    Players:AddToggle(
        {
            Name = "Skill Aimbot <font color='rgb(30, 240, 30)'>( Majority Attacks )</font>",
            Description = "When active it moves the attacks to the target automatically.",
            Default = false,
            Callback = function(Value)

            end
        }
    )

    Players:AddSection({"Script - Players"})

    PlayerTimer = Players:AddButton(
            {
                Name = "Loading The Player List: <font color='rgb(50, 250, 50)'>(10 Seconds)</font>",
                Callback = function()

                end
            }
        )
    DropdownPlayers = Players:AddDropdown(
        {
            Name = "Select Players",
            Description = "Select your target to continue...",
            Options = {""},
            Default = "...",
            Callback = function(Value)
                if not (Value == "Nothing") then
                    _G.SelectPly = Value
                else
                    _G.SelectPly = nil
                end
            end
        }
    )

    ReloadPlayersList()
    local ReloadInterval = 10
local Timer = ReloadInterval + 1

spawn(function()
    while true do
        wait(0.85)
        Timer = Timer - 1

        if Timer <= ReloadInterval then
            PlayerTimer:Set(
                string.format("Loading The Player List: <font color='rgb(50, 250, 50)'>(%d Seconds)</font>", Timer)
            )

            if Timer < 1 then
                Timer = ReloadInterval + 3
                PlayerTimer:Set("Loading The Player List: <font color='rgb(230, 230, 50)'>(Reloading...)</font>")
                wait(0.5)
                ReloadPlayersList()
            end
        end
    end
end)

Players:AddToggle(
        {
            Name = "Spectate",
            Description = "Move the camera like the player.",
            Default = false,
            Callback = function(Value)
                if _G.SelectPly then
                    SpectatePlys = Value
                    local plr1 = game:GetService("Players").LocalPlayer.Character.Humanoid
                    local plr2 = game:GetService("Players"):FindFirstChild(_G.SelectPly)
                    repeat
                        wait(0.5)
                        pcall(
                            function()
                                game:GetService("Workspace").Camera.CameraSubject =
                                    game:GetService("Players"):FindFirstChild(_G.SelectPly).Character.Humanoid
                            end
                        )
                    until SpectatePlys == false
                    game:GetService("Workspace").Camera.CameraSubject =
                        game:GetService("Players").LocalPlayer.Character.Humanoid
                else
                    game:GetService("Workspace").Camera.CameraSubject =
                        game:GetService("Players").LocalPlayer.Character.Humanoid
                end
            end
        }
    )

    Players:AddToggle(
        {
            Name = "Teleport <font color='rgb(55, 250, 30)'>( SAFE )</font>",
            Default = false,
            Callback = function(Value)
                
            end
        }
    )
    
    Players:AddToggle(
        {
            Name = "Teleport <font color='rgb(255, 50, 30)'>( BYPASS )</font>",
            Default = false,
            Callback = function(Value)
                
            end
        }
    )
    
end


end)

if not success then
    OrionLib:MakeNotification({
        Name = "Erro ao carregar o script: ",
        Content = err,
        Image = "rbxassetid://4483345998",
        Time = 15
    })
    
end
