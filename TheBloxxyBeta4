local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local Net = ReplicatedStorage.Modules.Net
local RegisterAttack = Net:WaitForChild("RE/RegisterAttack")
local RegisterHit = Net:WaitForChild("RE/RegisterHit")
local LocalPlayer = Players.LocalPlayer

local COMBAT_CONFIG = {
    enabled = true,
    attacksPerTarget = 3,
    maxTargets = 5,
    baseRange = 100,
    minDelay = 0.05,
    maxDelay = 0.1,
    hitDelay = 0.02,
    randomization = {
        range = {min = -2, max = 2},
        timing = {min = -0.05, max = 0.05}
    }
}

-- Função para obter a parte principal do modelo
local function GetPrimaryPart(model)
    return model:FindFirstChild("HumanoidRootPart") or model:FindFirstChild("PrimaryPart")
end

-- Função para verificar se o alvo é válido
local function IsValidTarget(target)
    if not target then return false end

    local humanoid = target:FindFirstChildOfClass("Humanoid")
    if not humanoid or humanoid.Health <= 0 then return false end

    local targetPlayer = Players:GetPlayerFromCharacter(target)
    if targetPlayer and targetPlayer.Team == LocalPlayer.Team then return false end

    return true
end

-- Função para obter alvos próximos
local function GetNearbyTargets()
    local character = LocalPlayer.Character
    if not character or not character.PrimaryPart then return {} end

    local charPos = character.PrimaryPart.Position
    local targets = {}

    for _, folder in ipairs({workspace.Characters, workspace.Enemies}) do
        if folder then
            for _, entity in ipairs(folder:GetChildren()) do
                if entity ~= character and IsValidTarget(entity) then
                    local primaryPart = GetPrimaryPart(entity)
                    if primaryPart then
                        local distance = (primaryPart.Position - charPos).Magnitude
                        local range = COMBAT_CONFIG.baseRange + math.random(
                            COMBAT_CONFIG.randomization.range.min,
                            COMBAT_CONFIG.randomization.range.max
                        )

                        if distance <= range then
                            table.insert(targets, {
                                part = primaryPart,
                                distance = distance
                            })
                        end
                    end
                end
            end
        end
    end

    -- Ordena os alvos pela distância (mais próximos primeiro)
    table.sort(targets, function(a, b) return a.distance < b.distance end)
    return targets
end

-- Função para realizar o ataque
local function PerformAttackSequence(targets)
    if #targets == 0 then return end
    RegisterAttack:FireServer()

    for i = 1, math.min(#targets, COMBAT_CONFIG.maxTargets) do
        local target = targets[i]
        for _ = 1, COMBAT_CONFIG.attacksPerTarget do
            RegisterHit:FireServer(target.part)
            task.wait(COMBAT_CONFIG.hitDelay + math.random() * COMBAT_CONFIG.randomization.timing.max)
        end
    end
end

-- Variável para controle do tempo entre os ataques
local lastAttackTime = 0
local function CombatLoop()
    if not COMBAT_CONFIG.enabled then return end

    local now = tick()
    local baseDelay = math.random(
        COMBAT_CONFIG.minDelay * 100,
        COMBAT_CONFIG.maxDelay * 100
    ) / 100

    if now - lastAttackTime >= baseDelay then
        local targets = GetNearbyTargets()
        PerformAttackSequence(targets)
        lastAttackTime = now
    end
end

-- Conexões para combate e limpeza
local combatConnection
local characterConnection

local function Cleanup()
    if combatConnection then
        combatConnection:Disconnect()
        combatConnection = nil
    end
    if characterConnection then
        characterConnection:Disconnect()
        characterConnection = nil
    end
end

-- Função para configurar o combate
local function SetupCombat()
    Cleanup()

    combatConnection = RunService.Heartbeat:Connect(CombatLoop)
end

-- Conectar ao evento de personagem adicionado
characterConnection = LocalPlayer.CharacterAdded:Connect(function()
    task.wait(0.5) -- Aguarda o personagem ser carregado
    SetupCombat()
end)

-- Configura o combate inicialmente
SetupCombat()
